#include "Student.h"
#ifndef __GRADUATE
#define __GRADUATE
class Graduate : public Student
{
	public:
		// Constructors...
		Graduate();
		Graduate(string ssn, string lastname, int age);
		Graduate(string firstname, string lastname, string ssn,
			string phone_num, int age);
		Graduate(string firstname, string lastname, string ssn,
			string phone_num, int age, string grad_advisor,
			string thesis_title);
		
		// Accessor functions
		string get_advisor ( );
		string get_thesis( );
		
		// Mutator functions
		void set_thesis (string);
		void set_advisor (string);
		
		// Query Functions
		bool check_thesis(string thesis_title);
		bool check_advisor(string advisor_name);
		
		// Other functions...
		void display();
		void write_to_stream (ofstream &);
	private:
		// Name of the graduate student's advisor
		string advisor;
		//Title of the graduate student's thesis
		string thesis;
};
#endif
/*
 * Zhiyang Ong
 *
 * Assume that phone numbers can be duplicated since students can be siblings,
 * relatives, or friends living in the same house, where the same line phone
 * is shared between them
 *
 * @acknowledgement - code samples/examples from the web page
 *	<http://www-scf.usc.edu/~csci455/>; they are written by Dr. K. Narayanaswamy
 * @reference: D.S. Malik, "C++ Programming: Program Design Including Data
 *      Structures", Second Edition, Thomson Technology, USA, 2004.
 */

#ifndef __STUDENT
#define __STUDENT

// ==========================================================================

class Student {
	public:
		// Constructors...
		Student();		// Student default constructor
		// Standard constructor - provide 3 parameters
		Student(string ssn, string lastname, int age);
		// Standard constructor - provide all parameters
		Student(string firstname, string lastname, string ssn,
			string phone_num, int age);
		
		// ------------------------------------------------------------------
		
		/**
		 * Modifier/accessor functions...
		 * All the modifier/update functions return true if the update is
		 * successful, and false otherwise
		 */
		bool set_ssn(string);
		bool set_lastname(string); 
		bool set_firstname(string); 
		bool set_phone(string); 
		bool set_age(int);
		void set_graduate();
		
		// ------------------------------------------------------------------
		
		// Accessor functions...
		string get_ssn();
		string get_lastname();
		string get_firstname();
		string get_phone();
		int get_age();
		bool get_graduate();
		
		// ------------------------------------------------------------------
		
		// Query functions...
		bool check_last_name(string lastname);
		bool check_first_name(string firstname);
		bool check_social_security_number(string ssn);
		bool check_phone_number(string phonenumber);
		bool check_age(int age);
		
		// ------------------------------------------------------------------
		
		// Other functions...
		// display student data to the terminal
		virtual void display();
		// write student data to an output file stream that has been opened
		virtual void write_to_stream(ofstream &);
		// Convert all letters in a string to Uppercase
		void uppercase (string & s);

	// ----------------------------------------------------------------------

	private:
		

		// Declaring variables
		/**
		 * Assume that all names of students can be written using English alphabets
		 * That is, no characters outside the English language may be used
		 */
		// Last name should only contain alphabetic characters
		string last_name;
		// First name should only contain alphabetic characters
		string first_name;
		/**
		 * Digits in all places, except characters in position 4 and 7
		 * - they should be dashes '-'
		 * US security social numbers only.
		 */
		string social_security_number;
		/**
		 * US Phone numbers only...
		 * 13 characters: '(', character 1; ')', character 5; '-', character 9;
		 * remaining characters are digits
		 */
		string phone_number;
		/**
		 * Should be non-negative (a baby can be 0 years of age)
		 * and less than 120 (nobody lives for more than 120 years)
		 */
		int student_age;
		// Boolean flag to indicate if student is a graduate student
		bool graduate;
};
#endif
/**
 * Zhiyang Ong
 *
 * Assume that phone numbers can be duplicated since students can be siblings,
 * relatives, or friends living in the same house, where the same line phone
 * is shared between them
 *
 * @acknowledgement - code samples/examples from the web page
 *	<http://www-scf.usc.edu/~csci455/>; they are written by
 *	Dr. K. Narayanaswamy
 * @reference: D.S. Malik, "C++ Programming: Program Design Including Data
 *	Structures", Second Edition, Thomson Technology, USA, 2004, pp. 1167.
 */

// Including header files
#include <iostream>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <climits>
#include <cfloat>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <list>
using namespace std;
#include "Student.h"
// ==========================================================================
typedef list<Student *> Student_list;
typedef list<Student *>::iterator Student_list_pointer;
class StudentDB {
public:



	// Declare and initialize global variables
	private:
	// Number of correct records in the database
	int number_correct_records;
	// Index of the last student/element in the array
	int index_of_last_element;
	// The database is a pointer to the first Student element
	list<Student *>database;

	// --------------------------------------------------------------------------

	public:
	// Default constructor
	StudentDB();
	
	// ---------------------------------------------------------------------
	
	// Declaring function prototypes

	// Update/modifier functions	
	/**
	 * Add the student if that social security number is not a duplicate
	 * return true if added and false otherwise
	 */
	bool add_student (Student *);
	bool delete_student (string ssn);
	void set_number_correct_records(int num_correct);
	void increment_index_of_last_element();
	void decrement_index_of_last_element();
	
	// Accessor methods
	int get_number_correct_records();
	int get_index_of_last_element();
	Student_list_pointer find_student(string ssn);
	
	// Query functions...
	bool check_lastname(string lastname);
	bool check_firstname(string firstname);
	bool check_socialsecuritynumber(string ssn);
	bool check_phonenumber(string phonenumber);
	bool check_studentage(int age);
	bool check_duplicate_social_security_number(string ssn);
	bool check_thesis(string thesis_title);
	bool check_advisor(string advisor_name);
	bool check_major(string major_title);
	bool check_minor(string minor_title);
			
	// Input/Output functions...
	/**
	 * Opens filename and initializes the database to the data in that file
	 * returns true if everything works, and false otherwise
	 */
	bool import_database (string filename);
	/**
	 * Opens filename and exports the database to that file in a format
	 * that is compatible to the input file;
	 * returns true if everything works, and false otherwise
	 */
	bool export_database(string filename);
	
	// Other functions...	
	void uppercase(string & s);
	bool display_student (string ssn);
	void display_all ();
	
	void print_grad_header();
	void print_ugrad_header();
};
#include "Student.h"
#ifndef __UNDERGRADUATE
#define __UNDERGRADUATE
class Undergraduate : public Student
{
	public:
		// Constructors...
		Undergraduate();
		Undergraduate(string ssn, string lastname, int age);
		Undergraduate(string firstname, string lastname, string ssn,
			string phone_num, int age);
		Undergraduate(string firstname, string lastname, string ssn,
			string phone_num, int age, string major_title,
			string minor_title);
	
		// Accessor functions
		string get_major ( );
		string get_minor( );
		
		// Mutator functions
		void set_minor (string);
		void set_major (string);
		
		// Other functions...
		bool check_major(string major_title);
		bool check_minor(string minor_title);
		void display();
		void write_to_stream (ofstream &);
	private:
		// Title of selected major
		string major;
		// Title of selected minor
		string minor;
};
#endif
// Importing header files...
#include <iostream>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
using namespace std;
#include "Graduate.h"
// ==========================================================================

// Declaring constants...
// Maximum number of characters for the thesis
const int MAXIMUM_CHARACTERS_OF_THESIS=20;
// Maximum number of characters for the name of the graduate student's advisor
const int MAXIMUM_CHARACTERS_OF_ADVISOR=15;
// Maximum number of characters in the any field
const int MAXIMUM_NUMBER_OF_CHARACTERS=20;

// ------------------------------------------------------------------

// Constructors...
// Default constructor
Graduate::Graduate()
{
	/**
	 * Automatically initialize the Student Attributes by default
	 * Student constructor
	 */
	if(set_ssn("999-99-9999") &&
		set_lastname("Lastname") &&
		set_firstname("Firstname") &&
		set_phone("(999)999-9999") &&
		set_age(120)) {
		
		// Do nothing...
	}else{
		cout << "Default constructor of the Graduate student has errors"
			<< endl;
	}
	advisor = "GradAdvisor";
	thesis = "Complex-Systems";
	set_graduate();
}

// Standard constructor - provide 3 parameters
Graduate::Graduate(string ssn, string lastname, int age)
{
	/**
	 * Automatically initialize the Student Attributes by default
	 * Student constructor
	 */
	if(set_ssn(ssn) &&
		set_lastname(lastname) &&
		set_firstname("Firstname") &&
		set_phone("(999)999-9999") &&
		set_age(age)) {
		
		// Do nothing...
	}else{
		cout << "Default constructor of the Graduate student has errors"
			<< endl;
	}
	
	advisor = "GradAdvisor";
	thesis = "Complex-Systems";
	set_graduate();
}

// Standard constructor - provide 5 parameters
Graduate::Graduate(string firstname, string lastname, string ssn,
	string phone_num, int age)
{
	/**
	 * Automatically initialize the Student Attributes by default
	 * Student constructor
	 */
	if(set_ssn(ssn) &&
		set_lastname(lastname) &&
		set_firstname(firstname) &&
		set_phone(phone_num) &&
		set_age(age)) {
		
		// Do nothing...
	}else{
		cout << "Default constructor of the Graduate student has errors"
			<< endl;
	}
	
	advisor = "GradAdvisor";
	thesis = "Complex-Systems";
	set_graduate();
}


// Standard constructor - provide all parameters
Graduate::Graduate(string firstname, string lastname, string ssn,
	string phone_num, int age, string grad_advisor, string thesis_title)
{
	/**
	 * Automatically initialize the Student Attributes by default
	 * Student constructor
	 */
	if(set_ssn(ssn) &&
		set_lastname(lastname) &&
		set_firstname(firstname) &&
		set_phone(phone_num) &&
		set_age(age)) {
		
		set_advisor(grad_advisor);
		set_thesis(thesis_title);
		set_graduate();
	}else{
		cout << "Default constructor of the Graduate student has errors"
			<< endl;
	}
}
// ------------------------------------------------------------------

// Modifier/accessor functions...
/**
 * Function to assign/update the title of the graduate student's thesis
 * Assume that all graduate students have to write a thesis each
 * Thesis title can contain any character; number of characters must be
 * less than 21 (<= 20).
 * @param thesis_title is the title of the graduate student's thesis
 * @precondition thesis_title must be a valid thesis title
 * @return nothing
 */
void Graduate::set_thesis (string thesis_title) {
	if(check_thesis(thesis_title)) {
		thesis = thesis_title;
	}
}

/**
 * Function to assign/update the name of the graduate student's advisor
 * Assume that all graduate students have to undertake a research project each
 * Advisor's name can contain only alphabetic characters of a length
 * less than or equal to 15
 * Assume that no advisor's name will exceed 20 characters
 * @param advisor_name is the name of the graduate student's advisor
 * @precondition advisor_name must be a valid name
 * @return nothing
 */
void Graduate::set_advisor (string advisor_name) {
	if(check_advisor(advisor_name)) {
		advisor = advisor_name;
	}
}
		
// Accessor functions
/**
 * Function to obtain the name of the graduate student's advisor
 * Assume that all graduate students have to undertake a research project each
 * @return name of graduate student's advisor
 */
string Graduate::get_advisor ( ) {
	return advisor;
}


/**
 * Function to access the title of the graduate student's thesis
 * Assume that all graduate students have to write a thesis each
 * @return title of the graduate student's thesis
 */
string Graduate::get_thesis( ) {
	return thesis;
}


// Query Functions

/**
 * Function to determine if the title of the graduate student's thesis
 * is valid
 * Assume that all graduate students have to write a thesis each
 * Thesis title can contain any character; number of characters must be
 * less than 21 (<= 20), and no white space is allowed.
 * @param thesis_title is the title of the graduate student's thesis
 * @return true if thesis title is valid; else, return false
 */
bool Graduate::check_thesis(string thesis_title) {
	if (thesis_title.size() > MAXIMUM_CHARACTERS_OF_THESIS) {
		// Thesis title is too long
		return false;
	}else{
		return true;
	}
}


/**
 * Function to determine if the name of the graduate student's advisor
 * is valid
 * Assume that all graduate students have to undertake a research project each
 * Advisor's name can contain only alphabetic characters of a length
 * less than or equal to 15
 * Assume that no advisor's name will exceed 20 characters
 * @param advisor_name is the name of the graduate student's advisor
 * @precondition advisor_name must be a valid name
 * @return nothing
 */
bool Graduate::check_advisor(string advisor_name) {
	if(advisor_name.size() > MAXIMUM_CHARACTERS_OF_ADVISOR) {
		return false;
	}

	for (int i=0; i < advisor_name.size(); i++) {
		// Are there any non-alphabetic characters?
		if (!isalpha(advisor_name[i])) {
			// Yes, the advisor name is invalid
			return false;
		}
	}
	return true;
}

// Other functions...

/**
 * Function to display the graduate student's data to the terminal
 */
void Graduate::display() {
	cout.setf(ios::left);
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_lastname();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_firstname();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_ssn();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_phone();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_age();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_advisor();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_thesis() << endl;
}


/**
 * Function to write graduate student's data to an output file
 * stream that has been opened
 */
void Graduate::write_to_stream (ofstream & outputfile) {
	// Left align the data
	outputfile.setf(ios::left);
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << "Graduate";
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << Student::get_lastname();
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << get_firstname();
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << get_ssn();
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << get_phone();
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << get_age();
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << get_advisor();
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << get_thesis() << endl;
	//outputfile << endl;
}
/**
 * Zhiyang Ong
 *
 * Assume that phone numbers can be duplicated since students can be siblings,
 * relatives, or friends living in the same house, where the same line phone
 * is shared between them
 *
 * @acknowledgement - code samples/examples from the web page
 *	<http://www-scf.usc.edu/~csci455/>; they are written by
 *	Dr. K. Narayanaswamy
 * @reference: D.S. Malik, "C++ Programming: Program Design Including Data
 *	Structures", Second Edition, Thomson Technology, USA, 2004, pp. 1167.
 */

// Including header files
#include <iostream>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <climits>
#include <cfloat>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
using namespace std;
#include "Student.h"
// ==========================================================================

// Declaring constants...
// Number of delimiter characters to be deleted
const int NUMBER_OF_DELIMITER_CHARACTERS=1;
// Indices of the delimiters (dashes) in the US social security numbers
const int INDEX_FIRST_DELIMITER=3;
const int INDEX_SECOND_DELIMITER=6;
// Maximum number of characters in the any field
const int MAXIMUM_NUMBER_OF_CHARACTERS=20;

// ------------------------------------------------------------------

// Constructors...
// Default constructor
Student::Student( ) {
	// Fill up the parameters of the Student with default values
	first_name="Firstname";
	last_name="Lastname";
	social_security_number="999-99-9999";
	phone_number="(999)999-9999";
	student_age=120;
	graduate = false;
};

// Standard constructor - provide 3 parameters
Student::Student(string ssn, string lastname, int age) {
	// Fill up the parameters of the Student with values that are passed in
	if(check_last_name(lastname)) {
		last_name=lastname;
	}else{
		last_name="Lastname";
	}
	
	if(check_social_security_number(ssn)) {
		social_security_number=ssn;
	}else{
		social_security_number="999-99-9999";
	}
	
	if(check_age(age)) {
		student_age=age;
	}else{
		student_age=120;
	}
	
	// Fill up the remaining parameters with default values
	first_name="Firstname";
	phone_number="(999)999-9999";
	graduate = false;
};

// Standard constructor - provide all parameters
Student::Student(string firstname, string lastname, string ssn,
	string phone_num, int age) {

	// Fill up the parameters of the Student with values that are passed in
	if(check_last_name(lastname)) {
		last_name=lastname;
	}else{
		last_name="Lastname";
	}
	
	if(check_first_name(firstname)) {
		first_name=firstname;
	}else{
		first_name="Firstname";
	}
	
	if(check_social_security_number(ssn)) {
		social_security_number=ssn;
	}else{
		social_security_number="999-99-9999";
	}
	
	if(check_age(age)) {
		student_age=age;
	}else{
		student_age=120;
	}

	if(check_phone_number(phone_num)) {
		phone_number=phone_num;
	}else{
		phone_number="(999)999-9999";
	}
	graduate = false;
};

// ------------------------------------------------------------------

// Modifier/accessor functions...

/**
 * Function to assign the US Social Security number of the student
 * It must contain digits in all places, except dashes '-' in positions
 * 4 and 7
 * @param ssn is the assigned US Social Security number
 * @pre ssn must be a valid US Social Security number
 * @return true if ssn is valid and assigned; return false otherwise
 */
bool Student::set_ssn(string ssn) {
	// Precondition...
	if(check_social_security_number(ssn)) {
		social_security_number=ssn;
		return true;
	}else{
		return false;
	}
}

/**
 * Function to assign the last name of the student
 * It should only contain alphabetic characters
 * @param lastname is the assigned last name of the student
 * @pre lastname must be a valid last name
 * @return true if lastname is valid and assigned; return false otherwise
 */
bool Student::set_lastname(string lastname) {
	// Precondition...
	if(check_last_name(lastname)) {
		last_name=lastname;
		return true;
	}else{
		return false;
	}
}

/**
 * Function to assign the first name of the student
 * It should only contain alphabetic characters
 * @param firstname is the assigned first name of the student
 * @pre firstname must be a valid first name
 * @return true if firstname is valid and assigned; return false otherwise
 */
bool Student::set_firstname(string firstname) {
	// Precondition...
	if(check_first_name(firstname)) {
		first_name=firstname;
		return true;
	}else{
		return false;
	}
}

/**
 * Function to assign the US phone number of the student
 * It should only contain '(' as the first character, ')' as the 5th character,
 * and '-' as the 9th character
 * @param phone_num is the assigned phone number of the student
 * @pre phone_num must be a valid phone number
 * @return true if phone_num is valid and assigned; return false otherwise
 */
bool Student::set_phone(string phone_num) {
	// Precondition...
	if(check_phone_number(phone_num)) {
		phone_number=phone_num;
		return true;
	}else{
		return false;
	}
}

/**
 * Function to assign the age of the student
 * It should be non-negative (a baby can be 0 years of age)
 * and less than 120 (nobody lives for more than 120 years)
 * @param age is the assigned phone number of the student
 * @pre age must be a valid age
 * @return true if age is valid and assigned; return false otherwise
 */
bool Student::set_age(int age) {
	// Precondition...
	if(check_age(age)) {
		student_age=age;
		return true;
	}else{
		return false;
	}
}


/**
 * Function to set the student's status as graduate
 * @return nothing
 */
void Student::set_graduate() {
	graduate = true;
}

// Accessor functions...

/**
 * Function to access the US Social Security number of the student
 * @return the Social Security number of the student
 */
string Student::get_ssn() {
	return social_security_number;
}

/**
 * Function to access the last name of the student
 * @return the last name of the student
 */
string Student::get_lastname() {
	return last_name;
}

/**
 * Function to access the first name of the student
 * @return the first name of the student
 */
string Student::get_firstname() {
	return first_name;
}

/**
 * Function to access the phone number of the student
 * @return the phone number of the student
 */
string Student::get_phone() {
	return phone_number;
}

/**
 * Function to access the age of the student
 * @return the age of the student
 */
int Student::get_age() {
	return student_age;
}


/**
 * Function to query if this student is a graduate student
 * @return true of this student is a graduate student;
 *	else, return false
 */
bool Student::get_graduate() {
	return graduate;
}


// Query functions...

/**
 * Function to check it the student's last name is valid
 * @param lastname is the last name of the student
 * @return true if the last name includes only alphabetic characters;
 *	else, return false.
 *	Hence, names of people that include non-alphabetic characters
 *	will be considered invalid. This is a current program limitation
 *	given the assignment's specification. It should allow names with
 *	special characters to be valid, e.g. some European names with
 *	accented characters
 */
bool Student::check_last_name(string lastname) {
	for (int i=0; i < lastname.size(); i++) {
		// Are there any non-alphabetic characters?
		if (!isalpha(lastname[i])) {
			// Yes, ths last name is invalid
			return false;
		}
	}
	return true;
}

/**
 * Function to check it the student's first name is valid
 * @param firstname is the first name of the student
 * @return true if the first name includes only alphabetic characters;
 *	else, return false.
 *	Hence, names of people that include non-alphabetic characters
 *	will be considered invalid. This is a current program limitation
 *	given the assignment's specification. It should allow names with
 *	special characters to be valid, e.g. some European names with
 *	accented characters
 */
bool Student::check_first_name(string firstname) {
	for (int i=0; i < firstname.size(); i++) {
		// Are there any non-alphabetic characters?
		if (!isalpha(firstname[i])) {
			// Yes, the last name is invalid
			return false;
		}
	}
	return true;
}

/**
 * Function to check if the social security number is valid
 * @param ssn is a possible valid social security number of a
 *	student; ssn must contain only digits in all characters except
 *	the 4th and 7th, which are dashes
 * @return true if ssn is valid; else, return false
 */
bool Student::check_social_security_number(string ssn) {
	for (int i=0; i < ssn.size(); i++) {
		/**
		 * Are there any non-digits in characters that are supposed
		 * to be digits?
		 */
		if ((i != 3) && (i != 6) && (!isdigit(ssn[i]))) {
			// Yes, the ssn is invalid
			return false;
		}else if(((i == 3) || (i == 6)) && (ssn[i]!='-')) {
			return false;
		}
	}
	return true;
}

/**
 * Function to check if the phone number is valid
 * @param phonenumber is a possible valid phone number of a
 *	student; phonenumber must contain only digits in all characters
 *	 except the 1st ('('), 5th (')'), and 9th ('-')
 * @return true if phonenumber is valid; else, return false
 */
bool Student::check_phone_number(string phonenumber) {
	for (int i=0; i < phonenumber.size(); i++) {
		/**
		 * Are there any non-digits in characters that are supposed
		 * to be digits?
		 */
		if ((i == 0) && (phonenumber[i] != '(')) {
			// Yes, the phonenumber is invalid
			return false;
		}else if((i == 4) && (phonenumber[i]!=')')) {
			return false;
		}else if ((i == 8) && (phonenumber[i]!='-')) {
			// Yes, the phonenumber is invalid
			return false;
		}else if((!isdigit(phonenumber[i])) && (i!=0) && (i!=4) &&(i!=8)) {
			// Yes, the phonenumber is invalid
			return false;
		}
	}
	return true;
}

/**
 * Function to check if the student's age is valid
 * @param age is the age of the student; it should not be over 120,
 *	and it must be greater than 0.
 *	Needs more information since it makes no sense to have a toddler
 *	pursuing a Ph.D. in Computer Engineering or Biochemistry;
 *	assertions for this method implementation suffice according to
 *	the requirements of the assignment
 * @return true if age is valid; else, return false
 */
bool Student::check_age(int age) {
	if((age<1) || (age>120)) {
		return false;
	}else{
		return true;
	}
}
		   
/**
 * Function to display student data to the terminal
 */
void Student::display() {
	cout.setf(ios::left);
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_lastname();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_firstname();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_ssn();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_phone();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_age() << endl;
}

// write student data to an output file stream that has been opened
void Student::write_to_stream(ofstream & outputfile) {
	// Left align the data
	outputfile.setf(ios::left);
	outputfile.width(16);
	outputfile << Student::get_lastname();
	outputfile.width(16);
	outputfile << get_firstname();
	outputfile.width(16);
	outputfile << get_ssn();
	outputfile.width(16);
	outputfile << get_phone();
	outputfile.width(16);
	outputfile << get_age() << endl;
	outputfile << endl;
}
/**
 * Zhiyang Ong
 *
 * Assume that phone numbers can be duplicated since students can be siblings,
 * relatives, or friends living in the same house, where the same line phone
 * is shared between them
 *
 * @acknowledgement - code samples/examples from the web page
 *	<http://www-scf.usc.edu/~csci455/>; they are written by
 *	Dr. K. Narayanaswamy
 * @reference: D.S. Malik, "C++ Programming: Program Design Including Data
 *	Structures", Second Edition, Thomson Technology, USA, 2004, pp. 1167.
 */

// Including header files
#include <iostream>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <climits>
#include <cfloat>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <list>
using namespace std;
//#include "Student.h"
#include "StudentDB.h"
#include "Undergraduate.h"
#include "Graduate.h"
#ifndef __STUDENTDB
#define __STUDENTDB
// ==========================================================================

// Declaring constants...
// Maximum number of students that can be placed in the table
const int MAXIMUM_NUMBER_OF_STUDENTS=50;
// Number of delimiter characters to be deleted
const int NUMBER_OF_DELIMITER_CHARACTERS=1;
// Indices of the delimiters (dashes) in the US social security numbers
const int INDEX_FIRST_DELIMITER=3;
const int INDEX_SECOND_DELIMITER=6;
// Maximum number of characters in the any field
const int MAXIMUM_NUMBER_OF_CHARACTERS=20;
// Maximum number of characters for the thesis
const int MAXIMUM_CHARACTERS_OF_MAJOR=5;
// Maximum number of characters for the name of the Undergraduate student's advisor
const int MAXIMUM_CHARACTERS_OF_MINOR=5;
// Maximum number of characters for the thesis
const int MAXIMUM_CHARACTERS_OF_THESIS=20;
// Maximum number of characters for the name of the graduate student's advisor
const int MAXIMUM_CHARACTERS_OF_ADVISOR=15;
// Graduate student status
const string GRADUATE_STATUS="GRADUATE";
// Undergraduate student status
const string UNDERGRADUATE_STATUS="UNDERGRADUATE";

// Declare and nitialize variables...
// Database that stores the correct student records
Student student_records[MAXIMUM_NUMBER_OF_STUDENTS];

// ------------------------------------------------------------------

// Default constructor
StudentDB::StudentDB() {
	number_correct_records=0;
	index_of_last_element=-1;
}

// ------------------------------------------------------------------

/**
 * Fuunction to read input from a file and process it
 * #Read the particulars of each student in a line with the following format:
 *	Last_name	First_name	Social_Security_Number	Telephone	Age
 * Assume that the input file will contain data in this format
 * @param inputfilename is the name of the input file
 */
bool StudentDB::import_database(string inputfilename) {
	
	// Create input file stream
	ifstream inputfile;
	// Open the input file
	inputfile.open(inputfilename.c_str());
	// Assertion to check if the input file exist
	if(inputfile == NULL) {
		cout << "Input file, with the filename " << inputfilename
			<< ", does not exist!" << endl;
		return false;
	}
	
	
	/**
	 * Declare and instantiate some variables to temporarily store data
	 * before processing them
	 */
	// Last name of the student
	string lastname="";
	// First name of the student
	string firstname="";
	// Student's social security number
	string socialsecuritynumber="";
	// Student's phone number in the united states
	string phonenumber="";
	// Student's age
	int studentage=0;
	// Undergraduate's minor
	string minor_title;
	// Undergraduate's major
	string major_title;
	// Name of graduate's advisor
	string advisor_name;
	// Title of graduate's thesis
	string thesis_title;
	// Status of the student - undergraduate or graduate
	string student_status;
	// Number of errors found in the student record
	int errors=0;
	// Current index in which correct student record should be stored
	int correct_index;
	/**
	 * Temporary store the social security number so that it's dashes can be
	 * removed without modifying the social_security_number field of the
	 * student
	 */
	string temp_ssn="";
	
	Student *tempStudent = new Student();
	
	/**
	 * Current index of the record of student particulars
	 * that is being enumerated
	 */
	int i=0;
	// Start processing the data in the table
	while(inputfile != NULL) {
		/**
		 * Stop processing the input file once its end has been reached
		 * Assume that all students are undergraduates by default
		 */
		if ( (inputfile >> student_status >> lastname	>> firstname
			>> socialsecuritynumber >> phonenumber >> studentage
			>> major_title >> minor_title) == NULL) {
			break;
		}

		i++;
		
		uppercase(student_status);
		
		/**
		 * Check if the student particulars are valid...
		 * If any of the student particulars is invalid,
		 * ignore this current line in the input file and
		 * skip to the next
		 */
		if(student_status == GRADUATE_STATUS) {
			advisor_name = major_title;
			thesis_title = minor_title;

if(advisor_name == thesis_title) {
cout << "Wrong thesis-advisor assignment" << endl;
}

			major_title="";
			minor_title="";
		}else if((student_status == UNDERGRADUATE_STATUS)
			&& (!check_major(major_title))) {
			cout << "\t Ignoring Record Number " << i <<
				" - invalid major" << endl;
			cout << "\t\t Major should contain no more than 5 "
				<< "characters, and no whitespace" << endl;
			// I guess that's 2 more years in college of poor/no income for you
			errors++;
			continue;
		}else if((student_status == UNDERGRADUATE_STATUS)
			&& (!check_minor(minor_title))) {
			cout << "\t Ignoring Record Number " << i <<
				" - invalid minor" << endl;
			cout << "\t\t Minor should contain no more than 5 "
				<< "characters, and no whitespace" << endl;
			// One more semester of cheap food in college, I guess
			errors++;
			continue;
		}else if((student_status != UNDERGRADUATE_STATUS)
			&& (student_status != GRADUATE_STATUS)) {
			cout << "\t Ignoring Record Number " << i <<
				" - poor student status" << endl;
//cout << "student_status is: " << student_status << endl;
//cout << check_major(minor_title) << endl;
//cout << check_minor(major_title) << endl;
//cout << (student_status == UNDERGRADUATE_STATUS) << endl;
			cout << "\t\t A student must either be a graduate"
				<< " or undergraduate student" << endl;
			errors++;
			continue;
		}
		
		if((student_status == GRADUATE_STATUS) && (!check_thesis(thesis_title))) {
			cout << "\t Ignoring Record Number " << i <<
				" - poor thesis title" << endl;
			cout << "\t\t Thesis title should contain no more than 20 "
				<< "characters, and no whitespace" << endl;
			// How did you pass Quals???
			errors++;
			continue;
		}
		
		if((student_status == GRADUATE_STATUS) && (!check_advisor(advisor_name))) {
			cout << "\t Ignoring Record Number " << i <<
				" - invalid advisor name" << endl;
			cout << "\t\t Name of the graduate student's advisor should "
				<< "only contain alphabets, and be less than 15 characters"
				<< endl;
			// You should retake Quals...
			errors++;
			continue;
		}
		
		if(!check_lastname(lastname)) {
			cout << "\t Ignoring Record Number " << i <<
				" - bad last name" << endl;
			cout << "\t\t Last name of the student should only contain "
				<< "alphabets" << endl;
			errors++;
			continue;
		}else if(!check_firstname(firstname)) {
			cout << "\t Ignoring Record Number " << i <<
				" - bad first name" << endl;
			cout << "\t\t First name of the student should only contain "
				<< "alphabets" << endl;
			errors++;
			continue;
		}else if(!check_socialsecuritynumber(socialsecuritynumber)) {
			cout << "\t Ignoring Record Number " << i <<
				" - bad social security number" << endl;
			cout << "\t\t Security numbers should contain dashes at the "
				<< "4th and 7th characters, and digits otherwise" << endl;
			errors++;
			continue;
		}else if(!check_phonenumber(phonenumber)) {
			cout << "\t Ignoring Record Number " << i 
				<< " - bad phone number" << endl;
			cout << "\t\t Phone numbers should be given in this format: "
				<< "(XXX)XXX-XXXX, where each X is a digit" << endl;
			errors++;
			continue;
		}else if(!check_studentage(studentage)) {
			cout << "\t Ignoring Record Number " << i << " - bad age" << endl;
			cout << "\t\t Age of the student should be between 1 and 120, "
				<< "inclusive" << endl;
			errors++;
			continue;

		}else if(!check_duplicate_social_security_number(socialsecuritynumber)) {
			cout << "\t Ignoring Record Number " << i <<
				" - duplicate social security number" << endl;
			cout << "\t\t A student with the social security number, "
				<< socialsecuritynumber << ", already exists in the database"
				<< endl;
			errors++;
			continue;
		}

		/**
		 * Student's first and last names, social security number, phone
		 * number, and age are valid...
		 * Enter these details into the appropriate place in the records
		 */
		correct_index=i-errors-1;
		// Creating a student record
		
		if(student_status == GRADUATE_STATUS) {
/*
			tempStudent = new Graduate();
			tempStudent->set_thesis(thesis_title);
			tempStudent->set_advisor(advisor_name);
*/
Graduate *ngrad = new Graduate();
ngrad->set_thesis(thesis_title);
ngrad->set_advisor(advisor_name);
ngrad->set_lastname(lastname);
ngrad->set_firstname(firstname);
ngrad->set_ssn(socialsecuritynumber);
ngrad->set_phone(phonenumber);
ngrad->set_age(studentage);
if(!add_student(ngrad)) {
			cout << "Error in adding graduate student!" << endl;
			continue;
}
		}else{
/*
			tempStudent = new Undergraduate();
			tempStudent->set_minor(minor_title);
			tempStudent->set_major(major_title);
*/
Undergraduate *nugrad = new Undergraduate();
nugrad->set_minor(minor_title);
nugrad->set_major(major_title);
nugrad->set_lastname(lastname);
nugrad->set_firstname(firstname);
nugrad->set_ssn(socialsecuritynumber);
nugrad->set_phone(phonenumber);
nugrad->set_age(studentage);
if(!add_student(nugrad)) {
			cout << "Error in adding undergraduate student!" << endl;
			continue;
}
		}
/*
		tempStudent->set_lastname(lastname);
		tempStudent->set_firstname(firstname);
		tempStudent->set_ssn(socialsecuritynumber);
		tempStudent->set_phone(phonenumber);
		tempStudent->set_age(studentage);

		if(!add_student(tempStudent)) {
			cout << "Error in adding student!" << endl;
			continue;
		}
*/
	}
	
	cout << endl;
	cout << "Processed " << i << " student records" << endl;
	cout << (errors) << " errors were found" << endl;
	cout << endl;
	// Determine the number of correct student records
	number_correct_records=i-errors;
	
	// Close the input filestream
	inputfile.close();
	
	return true;
}


/**
 * Function to write output to a file
 * #Print the particulars of each student in a line with the following format:
 *	Last_name	First_name	Social_Security_Number	Telephone	Age
 * @param outputfilename is the name of the output file
 */
bool StudentDB::export_database(string outputfilename) {
	
	// Create output file stream
	ofstream outputfile;
	/**
	 * Convert outputfilename to string in C so that the file I/O function
	 * in the C++ library can be utilised
	 */
	outputfile.open(outputfilename.c_str());
	// Assertion to check if the output file was opened properly
	if(outputfile == NULL) {
		cout << "Output file, with the filename " << outputfilename
			<< ", does not exist!" << endl;
		return false;
	}
	
	
	// Left align the data
	outputfile.setf(ios::left);
	// Print the student records...
	
	// Enurmerate the list and print the students' details to the file
	Student_list_pointer p = database.begin();
	while(p != database.end()) {
		(*p) -> write_to_stream(outputfile);

		p++;
	}

	outputfile << endl;
	
	// Close the output filestream
	outputfile.close();
	return true;
}


/**
 * Function to convert all letters in the string s to uppercase
 * @param s is the string to be converted to uppercase
 */
void StudentDB::uppercase (string & s) {
	// For all characters in s
	for (int i=0; i < s.size(); i++) {
		// change it to uppercase
		s[i] = toupper(s[i]);
	}
}


/**
 * Function to check it the student's last name is valid
 * @param lastname is the last name of the student
 * @return true if the last name includes only alphabetic characters;
 *	else, return false.
 *	Hence, names of people that include non-alphabetic characters
 *	will be considered invalid. This is a current program limitation
 *	given the assignment's specification. It should allow names with
 *	special characters to be valid, e.g. some European names with
 *	accented characters
 */
bool StudentDB::check_lastname(string lastname) {
//cout<<"ln pre for"<<endl;
	for (int i=0; i < lastname.size(); i++) {
		// Are there any non-alphabetic characters?
		if (!isalpha(lastname[i])) {
			// Yes, ths last name is invalid

			return false;
		}

	}
	return true;
}


/**
 * Function to check it the student's first name is valid
 * @param firstname is the first name of the student
 * @return true if the first name includes only alphabetic characters;
 *	else, return false.
 *	Hence, names of people that include non-alphabetic characters
 *	will be considered invalid. This is a current program limitation
 *	given the assignment's specification. It should allow names with
 *	special characters to be valid, e.g. some European names with
 *	accented characters
 */
bool StudentDB::check_firstname(string firstname) {

	for (int i=0; i < firstname.size(); i++) {
		// Are there any non-alphabetic characters?

		if (!isalpha(firstname[i])) {
			// Yes, the last name is invalid

			return false;
		}
	}
	return true;
}


/**
 * Function to check if the social security number is valid
 * @param ssn is a possible valid social security number of a
 *	student; ssn must contain only digits in all characters except
 *	the 4th and 7th, which are dashes
 * @return true if ssn is valid; else, return false
 */
bool StudentDB::check_socialsecuritynumber(string ssn) {
	for (int i=0; i < ssn.size(); i++) {
		/**
		 * Are there any non-digits in characters that are supposed
		 * to be digits?
		 */
		if ((i != 3) && (i != 6) && (!isdigit(ssn[i]))) {
			// Yes, the ssn is invalid
			return false;
		}else if(((i == 3) || (i == 6)) && (ssn[i]!='-')) {
			return false;
		}
	}
	return true;
}


/**
 * Function to check if the phone number is valid
 * @param phonenumber is a possible valid phone number of a
 *	student; phonenumber must contain only digits in all characters
 *	 except the 1st ('('), 5th (')'), and 9th ('-')
 * @return true if phonenumber is valid; else, return false
 */
bool StudentDB::check_phonenumber(string phonenumber) {
	for (int i=0; i < phonenumber.size(); i++) {
		/**
		 * Are there any non-digits in characters that are supposed
		 * to be digits?
		 */
		if ((i == 0) && (phonenumber[i] != '(')) {
			// Yes, the phonenumber is invalid
			return false;
		}else if((i == 4) && (phonenumber[i]!=')')) {
			return false;
		}else if ((i == 8) && (phonenumber[i]!='-')) {
			// Yes, the phonenumber is invalid
			return false;
		}else if((!isdigit(phonenumber[i])) && (i!=0) && (i!=4) &&(i!=8)) {
			// Yes, the phonenumber is invalid
			return false;
		}
	}
	return true;
}


/**
 * Function to check if the student's age is valid
 * @param age is the age of the student; it should not be over 120,
 *	and it must be greater than 0.
 *	Needs more information since it makes no sense to have a toddler
 *	pursuing a Ph.D. in Computer Engineering or Biochemistry;
 *	assertions for this method implementation suffice according to
 *	the requirements of the assignment
 * @return true if age is valid; else, return false
 */
bool StudentDB::check_studentage(int age) {
	if((age<1) || (age>120)) {
		return false;
	}else{
		return true;
	}
}


/**
 * Function to check if the student's social security number is a duplicate
 * Social security numbers are uniquely assigned to each individual;
 * hence, there shall be no duplicates
 * @param ssn is the social security number
 * @param student_particulars is the student database
 * @param current_index is the current index of the student in the database
 * @return true if social security number is not a duplicate;
 *	else, return false
 */
bool StudentDB::check_duplicate_social_security_number(string ssn) {

	Student_list_pointer p = database.begin();
	
	while(p != database.end()) {
		if(((*p)->get_ssn()) == ssn) {
			return false;
		}
		p++;
	}

	return true;
}


/**
 * Function to determine if the minor title of the Undergraduate student
 * is valid
 * Assume that all Undergraduate students have to select a major
 * and minor each
 * Minor title can contain any character; number of characters must be
 * less than 6 (<= 5), and no white space is allowed.
 * @param minor_title is the minor of the Undergraduate student
 * @return true if minor title is valid; else, return false
 */
bool StudentDB::check_minor(string minor_title) {
	if (minor_title.size() > MAXIMUM_CHARACTERS_OF_MINOR) {
		// Minor title is too long
		return false;
	}else{
		return true;
	}
}


/**
 * Function to determine if the major of the Undergraduate student
 * is valid
 * Assume that all Undergraduate students have to select a major
 * and minor each
 * Major title can contain any character; number of characters must be
 * less than 6 (<= 5), and no white space is allowed.
 * @param major_title is the major title of the Undergraduate student
 * @return true if major title is valid; else, return false
 */
bool StudentDB::check_major(string major_title) {
	if (major_title.size() > MAXIMUM_CHARACTERS_OF_MAJOR) {
		// Major title is too long
		return false;
	}else{
		return true;
	}
}


/**
 * Function to determine if the title of the graduate student's thesis
 * is valid
 * Assume that all graduate students have to write a thesis each
 * Thesis title can contain any character; number of characters must be
 * less than 21 (<= 20), and no white space is allowed.
 * @param thesis_title is the title of the graduate student's thesis
 * @return true if thesis title is valid; else, return false
 */
bool StudentDB::check_thesis(string thesis_title) {
	if (thesis_title.size() > MAXIMUM_CHARACTERS_OF_THESIS) {
		// Thesis title is too long
		return false;
	}else{
		return true;
	}
}


/**
 * Function to determine if the name of the graduate student's advisor
 * is valid
 * Assume that all graduate students have to undertake a research project each
 * Advisor's name can contain only alphabetic characters of a length
 * less than or equal to 15
 * Assume that no advisor's name will exceed 20 characters
 * @param advisor_name is the name of the graduate student's advisor
 * @precondition advisor_name must be a valid name
 * @return nothing
 */
bool StudentDB::check_advisor(string advisor_name) {
	if(advisor_name.size() > MAXIMUM_CHARACTERS_OF_ADVISOR) {
		return false;
	}

	for (int i=0; i < advisor_name.size(); i++) {
		// Are there any non-alphabetic characters?
		if (!isalpha(advisor_name[i])) {
			// Yes, the advisor name is invalid
			return false;
		}
	}
	return true;
}


/**
 * Function to display the particulars of a students
 * @param index is the index of the student, whose details are to be displayed
 */
bool StudentDB::display_student(string ssn) {
	cout.setf(ios::left);

	Student_list_pointer p = database.begin();
	while(p != database.end()) {
		if(strcmp((*p)->get_ssn().c_str(),
			ssn.c_str()) == 0) {
/*			
			cout.width(16);
			if((*p)->get_graduate()) {
				cout << "Graduate";
			}else{
				cout << "Undergraduate";
			}

			cout.width(16);
			cout << (*p) -> get_lastname();
			cout.width(16);
			cout << (*p) -> get_firstname();
			cout.width(16);
			cout << (*p) -> get_ssn();
			cout.width(16);
			cout << (*p) -> get_phone();
			cout.width(16);
			cout << (*p) -> get_age();
			
			if((*p)->get_graduate()) {
				cout.width(16);
				cout << (*p) -> get_advisor();
				cout.width(16);
				cout << (*p) -> get_thesis();
			}else{
				cout.width(16);
				cout << (*p) -> get_major();
				cout.width(16);
				cout << (*p) -> get_minor();
			}
			cout << endl;
*/			
			(*p) -> display();
			return true;
		}
		p++;
	}

	return false;
}


/**
 * Function to add a student's particulars to the database
 * @param student_details contain the student's particulars
 * @param student student_particulars contain the database
 * If this student's social security number is not found in the database,
 * then the student is added to the database
 * Else, the user is informed that another student has the same social security
 * number as this student. Hence, this student's record cnnot be added to the
 * database.
 */
bool StudentDB::add_student(Student * student_details) {

	// List is empty and uninitialized
	Student_list_pointer p = database.begin();
	
	if(get_number_correct_records()==0) {
		database.push_back(student_details);
		increment_index_of_last_element();
		set_number_correct_records(get_index_of_last_element()+1);

		return true;
	}
	
	while(p != database.end()) {
		if(strcmp((*p)->get_ssn().c_str(),
			student_details->get_ssn().c_str()) >0) {
			
			database.insert(p, student_details);

			return true;
		}else if(strcmp((*p)->get_ssn().c_str(),
			student_details->get_ssn().c_str()) == 0) {
			
			cout << "A student with the social security number, "
				<< (*p)->get_ssn()
				<< ", already exists in the database"
				<< endl;
			return false;
		}
		p++;

	}

	database.push_back(student_details);
	increment_index_of_last_element();
	set_number_correct_records(get_index_of_last_element()+1);
	return true;
}


/**
 * Function to delete a student's details from the database
 * @param student_details contain the student's social security number
 * @param student student_particulars contain the database
 * If this student's social security number is not found in the database,
 * then this student's details cannot be removed from the database
 * Else, this student's record is removed from the database.
 */
bool StudentDB::delete_student(string ssn) {
	if(!check_socialsecuritynumber(ssn)) {
		cout << "Social security number entered is invalid" << endl;
		return false;
	}else{
		Student_list_pointer p = find_student(ssn);
		
		if(p != database.end()) {
			delete *p;
			database.erase(p);
			decrement_index_of_last_element();
			set_number_correct_records(get_index_of_last_element()+1);
			cout << "Student with the social security number, "
				<< ssn << ", is removed from the database." << endl;
			return true;
		}else{
			cout << "No student in the database has the social"
				<< " security number, "
				<< ssn << "." << endl;
			return false;
		}
	}
}


/**
 * Function to print the header of the terminal session
 */
void StudentDB::print_grad_header() {
	cout << "Graduate Student:" << endl;
	cout.setf(ios::left);
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Last Name";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "First Name";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Social Security #";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Phone #";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Age";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Advisor";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Thesis";
	cout << endl;
}

/**
 * Function to print the header of the terminal session
 */
void StudentDB::print_ugrad_header() {
	cout << "Undergraduate Student:" << endl;
	cout.setf(ios::left);
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Last Name";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "First Name";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Social Security #";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Phone #";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Age";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Major";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Minor";
	cout << endl;
}


/**
 * Function to display the particulars of all students
 */
void StudentDB::display_all() {
	cout.setf(ios::left);

	// Print the grad header...
	print_grad_header();
	Student_list_pointer p =database.begin();
	while(p != database.end()) {
		if((*p)->get_graduate()) {
			(*p) -> display();
		}
		p++;
	}
	
	// Print the undergrad header...
	print_ugrad_header();
	p =database.begin();
	while(p != database.end()) {
		if(!((*p)->get_graduate())) {
			(*p) -> display();
		}
		p++;
	}
}


/**
 * Function to assign the number of correct records in the database
 */
void StudentDB::set_number_correct_records(int num_correct) {
	number_correct_records=num_correct;
}


/**
 * Function to increment the index of the last element
 */
void StudentDB::increment_index_of_last_element() {
	index_of_last_element++;
}


/**
 * Function to decrement the index of the last element
 */
void StudentDB::decrement_index_of_last_element() {
	index_of_last_element--;
}


/**
 * Function to get the number of correct records
 * @return the number of correct records
 */
int StudentDB::get_number_correct_records() {
	return number_correct_records;
}

/**
 * Function to get the index of the last element
 * @return the index of the last element
 */
int StudentDB::get_index_of_last_element() {
	return index_of_last_element;
}


/**
 * Function to find the pointer to a student with the social security
 * number of ssn
 * @param ssn is the social security number of the student you want to
 *	search for.
 * @return the pointer to the student, if that student is found.
 *	Else, return a pointer pointing to the end of the list
 */
Student_list_pointer StudentDB::find_student(string ssn) {
	if(!check_socialsecuritynumber(ssn)) {
		cout << "Social security number entered is invalid" << endl;
		return database.end();
	}else{
		Student_list_pointer p = database.begin();
int j=0;
		while(p != database.end()) {
			if(((*p)->get_ssn()) == ssn) {
//cout<<"p is: "<<j<<endl;
				return p;
			}else{
int j=0;
				p++;
			}
		}
		return database.end();
	}
}
#endif
// Importing header files...
#include <iostream>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
using namespace std;
#include "Undergraduate.h"
// ==========================================================================

// Declaring constants...
// Maximum number of characters for the thesis
const int MAXIMUM_CHARACTERS_OF_MAJOR=5;
// Maximum number of characters for the name of the Undergraduate student's advisor
const int MAXIMUM_CHARACTERS_OF_MINOR=5;
// Maximum number of characters in the any field
const int MAXIMUM_NUMBER_OF_CHARACTERS=20;

// ------------------------------------------------------------------

// Constructors...
// Default constructor
Undergraduate::Undergraduate()
{
	/**
	 * Automatically initialize the Student Attributes by default
	 * Student constructor
	 */
	if(set_ssn("999-99-9999") &&
		set_lastname("Lastname") &&
		set_firstname("Firstname") &&
		set_phone("(999)999-9999") &&
		set_age(120)) {
		
		// Do nothing...
	}else{
		cout << "Default constructor of the Undergraduate student has errors"
			<< endl;
	}
	major = "BME";
	minor = "PHIL";
}

// Standard constructor - provide 3 parameters
Undergraduate::Undergraduate(string ssn, string lastname, int age)
{
	/**
	 * Automatically initialize the Student Attributes by default
	 * Student constructor
	 */
	if(set_ssn(ssn) &&
		set_lastname(lastname) &&
		set_firstname("Firstname") &&
		set_phone("(999)999-9999") &&
		set_age(age)) {
		
		// Do nothing...
	}else{
		cout << "Default constructor of the Undergraduate student has errors"
			<< endl;
	}
	
	major = "BME";
	minor = "PHIL";
}

// Standard constructor - provide 5 parameters
Undergraduate::Undergraduate(string firstname, string lastname, string ssn,
	string phone_num, int age)
{
	/**
	 * Automatically initialize the Student Attributes by default
	 * Student constructor
	 */
	if(set_ssn(ssn) &&
		set_lastname(lastname) &&
		set_firstname(firstname) &&
		set_phone(phone_num) &&
		set_age(age)) {
		
		// Do nothing...
	}else{
		cout << "Default constructor of the Undergraduate student has errors"
			<< endl;
	}
	
	major = "BME";
	minor = "PHIL";
}


// Standard constructor - provide all parameters
Undergraduate::Undergraduate(string firstname, string lastname, string ssn,
	string phone_num, int age, string major_title, string minor_title)
{
	/**
	 * Automatically initialize the Student Attributes by default
	 * Student constructor
	 */
	if(set_ssn(ssn) &&
		set_lastname(lastname) &&
		set_firstname(firstname) &&
		set_phone(phone_num) &&
		set_age(age)) {
		
		set_major(major_title);
		set_minor(minor_title);
	}else{
		cout << "Default constructor of the Undergraduate student has errors"
			<< endl;
	}
}
// ------------------------------------------------------------------

// Modifier/accessor functions...
/**
 * Function to assign/update the major of the undergraduate student
 * Assume that all Undergraduate students have to select a major
 * and minor each
 * @param major_title is the title of the Undergraduate student's major
 * @precondition major_title must be a valid major title;
 *	it must contain no whitespace and be less than 6 characters
 * @return nothing
 */
void Undergraduate::set_major (string major_title) {
	if(check_major(major_title)) {
		major = major_title;
	}else{
		major = major_title.substr(0,MAXIMUM_CHARACTERS_OF_MAJOR);
	}
}

/**
 * Function to assign/update the minor of the undergraduate student
 * Assume that all Undergraduate students have to select a major
 * and minor each
 * @param minor_title is the title of the Undergraduate student's minor
 * @precondition minor_title must be a valid minor title;
 *	it must contain no whitespace and be less than 6 characters
 * @return nothing
 */
void Undergraduate::set_minor (string minor_title) {
	if(check_minor(minor_title)) {
		minor = minor_title;
	}else{
		minor = minor_title.substr(0,MAXIMUM_CHARACTERS_OF_MINOR);
	}
}
		
// Accessor functions
/**
 * Function to obtain the major of the Undergraduate student
 * Assume that all Undergraduate students have to select a major
 * and minor each
 * @return major of Undergraduate student
 */
string Undergraduate::get_major ( ) {
	return major;
}


/**
 * Function to access the minor of the Undergraduate student
 * Assume that all Undergraduate students have to select a major
 * and minor each
 * @return minor of the Undergraduate student
 */
string Undergraduate::get_minor( ) {
	return minor;
}


// Query Functions

/**
 * Function to determine if the minor title of the Undergraduate student
 * is valid
 * Assume that all Undergraduate students have to select a major
 * and minor each
 * Minor title can contain any character; number of characters must be
 * less than 6 (<= 5), and no white space is allowed.
 * @param minor_title is the minor of the Undergraduate student
 * @return true if minor title is valid; else, return false
 */
bool Undergraduate::check_minor(string minor_title) {
	if (minor_title.size() > MAXIMUM_CHARACTERS_OF_MINOR) {
		// Minor title is too long
		return false;
	}else{
		return true;
	}
}


/**
 * Function to determine if the major of the Undergraduate student
 * is valid
 * Assume that all Undergraduate students have to select a major
 * and minor each
 * Major title can contain any character; number of characters must be
 * less than 6 (<= 5), and no white space is allowed.
 * @param major_title is the major title of the Undergraduate student
 * @return true if major title is valid; else, return false
 */
bool Undergraduate::check_major(string major_title) {
	if (major_title.size() > MAXIMUM_CHARACTERS_OF_MAJOR) {
		// Major title is too long
		return false;
	}else{
		return true;
	}
}

// Other functions...

/**
 * Function to display the Undergraduate student's data to the terminal
 */
void Undergraduate::display() {
	cout.setf(ios::left);
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_lastname();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_firstname();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_ssn();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_phone();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_age();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_major();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_minor() << endl;
}


/**
 * Function to write Undergraduate student's data to an output file
 * stream that has been opened
 */
void Undergraduate::write_to_stream (ofstream & outputfile) {
	// Left align the data
	outputfile.setf(ios::left);
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << "Undergraduate";
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << Student::get_lastname();
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << get_firstname();
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << get_ssn();
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << get_phone();
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << get_age();
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << get_major();
	outputfile.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	outputfile << get_minor() << endl;
	//outputfile << endl;
}
/**
 * Zhiyang Ong
 *
 * Assume that phone numbers can be duplicated since students can be siblings,
 * relatives, or friends living in the same house, where the same line phone
 * is shared between them
 *
 * @acknowledgement - code samples/examples from the web page
 *	<http://www-scf.usc.edu/~csci455/>; they are written by
 *	Dr. K. Narayanaswamy
 * @reference: D.S. Malik, "C++ Programming: Program Design Including Data
 *	Structures", Second Edition, Thomson Technology, USA, 2004, pp. 1167.
 */

// Including header files
#include <iostream>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <climits>
#include <cfloat>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
using namespace std;
//#include "Student.h"
#include "StudentDB.h"
#include "Undergraduate.h"
#include "Graduate.h"
// ==========================================================================

// Declare and initialize global variables
// Graduate student status
const string GRAD_STATUS="GRADUATE";
// Undergraduate student status
const string UGRAD_STATUS="UNDERGRADUATE";
// --------------------------------------------------------------------------

// Main function...
main() {
	cout << "STUDENT DATABASE PROGRAM" << endl;
	cout << endl;
	cout << "Keys:" << endl;
	cout << "A <== Add a student's particulars to the current datatbase" << endl;
	cout << "D <== Display a student's particulars" << endl;
	cout << "E <== Export database of students' paticulars" << endl;
	cout << "I <== Import student data from an input file" << endl;
	cout << "R <== Remove a student's particulars from the database" << endl;
	cout << "S <== Show all the particulars of students in the database" << endl;
	cout << "Q <== Exit program" << endl;
	cout << endl;
	
	// Names for input and output file streams
	string inputfilename, outputfilename;
	// Input character that will be processed as a menu option
	char input_character;
	// Boolean flag to exit the program
	bool exit_flag=false;
	// Flag to indicate that student database exist
	bool database_flag=false;
	// Flag for overwriting the input file
	bool overwrite=false;
	/**
	 * Social security number entered by the user to indicate that an operation
	 * will be performed on the database using this
	 */
	string input_ssn="";
	// Database that stores the correct student records
	StudentDB db;
	
	// Temporary variables to contain details of the student
	string fname;
	string lname;
	string ssnum;
	string phoneno;
	string student_status;
	string minor_dept;
	string major_dept;
	string name_advisor;
	string title_thesis;
	int age;
	Student *newStudent=new Student();
	
	// User menu options and processing
	while(!exit_flag) {
		cout << "Enter command (A, D, E, I, R, S - or Q to quit) : ";
		if((cin >> input_character) != NULL) {
			input_character=toupper(input_character);
		
			switch(input_character) {
				case 'Q':
					cout << "Exiting the database program..." << endl;
					return 0;
				case 'A':
					if(!database_flag) {
						cout << "Database is empty. "
							<< "Please import data before processing it."
							<< endl;
						continue;
					}
					
					// Prompt user for input
					cout << "Enter the following details of the student that "
						<< "be added to the database" << endl;
					cout << "Enter the status of the student: Graduate or Undergraduate? ";
					cin >> student_status;
					cout << "First name: ";
					cin >> fname;
					cout << "Last name: ";
					cin >> lname;
					cout << "Social Security Number: ";
					cin >> ssnum;
					cout << "Phone number: ";
					cin >> phoneno;
					cout << "Age: ";
					cin >> age;
					db.uppercase(student_status);
					if(student_status == GRAD_STATUS) {
						cout << "Advisor's name: ";
						cin >> name_advisor;
						cout << "Title of thesis: ";
						cin >> title_thesis;
					}else{
						cout << "Field of Major: ";
						cin >> major_dept;
						cout << "Field of Minor: ";
						cin >> minor_dept;
					}
					/**
					 * Check if the student particulars are valid...
					 * If any of the student particulars is invalid,
					 * ignore this current line in the input file and
					 * skip to the next
					 */
					if(!db.check_lastname(lname)) {
						cout << "\t\t Last name of the student should only contain "
							<< "alphabets" << endl;
					}else if(!db.check_firstname(fname)) {
						cout << "\t\t First name of the student should only contain "
							<< "alphabets" << endl;
					}else if(!db.check_socialsecuritynumber(ssnum)) {
						cout << "\t\t Security numbers should contain dashes at the "
							<< "4th and 7th characters, and digits otherwise" << endl;
					}else if(!db.check_phonenumber(phoneno)) {
						cout << "\t\t Phone numbers should be given in this format: "
							<< "(XXX)XXX-XXXX, where each X is a digit" << endl;
					}else if(!db.check_studentage(age)) {
						cout << "\t\t Age of the student should be between 1 and 120, "
							<< "inclusive" << endl;
					}else if(!db.check_duplicate_social_security_number(ssnum)) {
						cout << "\t Duplicate social security number" << endl;
					}else if((student_status == GRAD_STATUS)
						&& (!db.check_advisor(name_advisor))) {
						cout << "\t Name of graduate student's advisor is invalid" << endl;
						// You forgot who pays your stipend?
					}else if((student_status == GRAD_STATUS)
						&& (!db.check_thesis(title_thesis))) {
						cout << "\t Title of graduate student's thesis is invalid" << endl;
						// Retake Quals!!!
					}else if((student_status == UGRAD_STATUS)
						&& (!db.check_major(major_dept))) {
						cout << "\t Name of undergraduate student's major is invalid" << endl;
					}else if((student_status == UGRAD_STATUS)
						&& (!db.check_minor(minor_dept))) {
						cout << "\t Name of undergraduate student's minor is invalid" << endl;
					}else{

						if(student_status == GRAD_STATUS) {
							newStudent=new Graduate(fname,lname,ssnum,phoneno,age,
								name_advisor,title_thesis);
							db.add_student(newStudent);
						}else if(student_status == UGRAD_STATUS) {
							newStudent=new Undergraduate(fname,lname,ssnum,phoneno,age,
								major_dept,minor_dept);
							db.add_student(newStudent);
						}else{
							cout << "Students must be undergraduates or graduate students" << endl;
						}
						cout << "Student added..." << endl;
					}
					break;
				case 'D':
					if(!database_flag) {
						cout << "Database is empty. "
							<< "Please import data before processing it."
							<< endl;
						continue;
					}
					// Prompt user for input
					cout << "Please enter a social security number "
						<< "to search for: ";
					cin >> input_ssn;
					if(db.check_socialsecuritynumber(input_ssn)) {
						//cout << "Degree objective: " << student_status << endl;
//						if(student_status == GRAD_STATUS) {
						if((*db.find_student(input_ssn))->get_graduate()) {
							db.print_grad_header();
						}else{
							db.print_ugrad_header();
						}
						if(!db.display_student(input_ssn)) {
							cout << "The social security number you "
							<< "have entered is not found in the database." << endl;
						}
					}else{
						cout << "The social security number you have entered "
							<< "is invalid." << endl;
					}
					break;
				case 'E':
					if(!database_flag) {
						cout << "Database is empty. "
							<< "Please import data before processing it."
							<< endl;
						continue;
					}else{
						// Prompt user for input
						while(!overwrite) {
							cout << "Please enter output filename, "
								<< "and press the return key: ";
							cin >> outputfilename;
							cout << endl;
							if(outputfilename == inputfilename) {
								do{
									cout << "Do you want to overwrite "
										<< "the input file? Y/N?";
									cin >> input_character;
									input_character=toupper(input_character);
									if(input_character == 'Y') {
										overwrite=true;
										break;
									}else if(input_character == 'N') {
										break;
									}else{
										cout << "Enter Y or N: ";
									}
								}while((cin >> input_character) !=NULL);
							}else{
								break;
							}
						}
						db.export_database(outputfilename);
					}
					break;
				case 'I':
					// Prompt user for input
					cout << "Please enter input filename, "
						<< "and press the return key: ";
					cin >> inputfilename;
					cout << '\t' << "Processing the input file: "
						<< inputfilename << endl;
					cout << endl;
					// Read the input file
    				if(!db.import_database(inputfilename)) {
						return -1;
					}

					database_flag=true;
					break;
				case 'R':
					if(!database_flag) {
						cout << "Database is empty. "
							<< "Please import data before processing it."
							<< endl;
						continue;
					}
					// Prompt user for input
					cout << "Please enter a social security number "
						<< "to search for: ";
					cin >> input_ssn;
					db.delete_student(input_ssn);
					break;
				case 'S':
					if(!database_flag) {
						cout << "Database is empty. "
							<< "Please import data before processing it."
							<< endl;
						continue;
					}
					db.display_all();
					break;
				default:
					cout << "Invalid command entered. Please re-enter command..."
						<< endl;
					cout << endl;
					continue;
			}
		}else{
			return -1;
		}
		
		cout << endl;
	}
	
	// Write to output file...
	db.export_database(outputfilename);
	cout << "Output is written to the file: " << outputfilename << endl;
}
