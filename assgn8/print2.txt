/*
 * Zhiyang Ong
 *
 * Assume that phone numbers can be duplicated since students can be siblings,
 * relatives, or friends living in the same house, where the same line phone
 * is shared between them
 *
 * @acknowledgement - code samples/examples from the web page
 *	<http://www-scf.usc.edu/~csci455/>; they are written by Dr. K. Narayanaswamy
 * @reference: D.S. Malik, "C++ Programming: Program Design Including Data
 *      Structures", Second Edition, Thomson Technology, USA, 2004.
 */

// ==========================================================================

class Student {
	public:
		// Constructors...
		Student();		// Student default constructor
		// Standard constructor - provide 3 parameters
		Student(string ssn, string lastname, int age);
		// Standard constructor - provide all parameters
		Student(string firstname, string lastname, string ssn,
			string phone_num, int age);
		
		// ------------------------------------------------------------------
		
		/**
		 * Modifier/accessor functions...
		 * All the modifier/update functions return true if the update is
		 * successful, and false otherwise
		 */
		bool set_ssn(string);
		bool set_lastname(string); 
		bool set_firstname(string); 
		bool set_phone(string); 
		bool set_age(int); 
		
		// ------------------------------------------------------------------
		
		// Accessor functions...
		string get_ssn();
		string get_lastname();
		string get_firstname();
		string get_phone();
		int get_age();
		
		// ------------------------------------------------------------------
		
		// Query functions...
		bool check_last_name(string lastname);
		bool check_first_name(string firstname);
		bool check_social_security_number(string ssn);
		bool check_phone_number(string phonenumber);
		bool check_age(int age);
		
		// ------------------------------------------------------------------
		
		// Other functions...
		// display student data to the terminal
		void display();
		// write student data to an output file stream that has been opened
		void write_to_stream(ofstream &);
		// Convert all letters in a string to Uppercase
		void uppercase (string & s);

	// ----------------------------------------------------------------------

	private:
		

		// Declaring variables
		/**
		 * Assume that all names of students can be written using English alphabets
		 * That is, no characters outside the English language may be used
		 */
		// Last name should only contain alphabetic characters
		string last_name;
		// First name should only contain alphabetic characters
		string first_name;
		/**
		 * Digits in all places, except characters in position 4 and 7
		 * - they should be dashes '-'
		 * US security social numbers only.
		 */
		string social_security_number;
		/**
		 * Integer representation of the US social security number,
		 * without the dashes
		 * It is used for to determine compare 2 strings in order to sort the
		 * collection of student records, based on their US social security number,
		 * in ascending order.
		 */
		// int ssn;
		/**
		 * US Phone numbers only...
		 * 13 characters: '(', character 1; ')', character 5; '-', character 9;
		 * remaining characters are digits
		 */
		string phone_number;
		/**
		 * Should be non-negative (a baby can be 0 years of age)
		 * and less than 120 (nobody lives for more than 120 years)
		 */
		int student_age;
};
/**
 * Zhiyang Ong
 *
 * Assume that phone numbers can be duplicated since students can be siblings,
 * relatives, or friends living in the same house, where the same line phone
 * is shared between them
 *
 * @acknowledgement - code samples/examples from the web page
 *	<http://www-scf.usc.edu/~csci455/>; they are written by
 *	Dr. K. Narayanaswamy
 * @reference: D.S. Malik, "C++ Programming: Program Design Including Data
 *	Structures", Second Edition, Thomson Technology, USA, 2004, pp. 1167.
 */

// Including header files
#include <iostream>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <climits>
#include <cfloat>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
using namespace std;
#include "Student.h"
// ==========================================================================
class StudentDB {
public:



	// Declare and initialize global variables
	private:
	// Number of correct records in the database
	int number_correct_records;
	// Index of the last student/element in the array
	int index_of_last_element;
	/**
	 * Representation of the components that will form the links/"nodes"
	 * in the linked list
	 */
	struct student_element {
		Student *value;
		student_element *next;
	};
	// The database is a pointer to the first Student element
	student_element *database;
	student_element *last;

	// --------------------------------------------------------------------------

	public:
	// Default constructor
	StudentDB();
	
	// ---------------------------------------------------------------------
	
	// Declaring function prototypes

	// Update/modifier functions
	//void add_single_student(Student student_details);
	//void remove_selected_student(string ssn);
	
	/**
	 * Add the student if that social security number is not a duplicate
	 * return true if added and false otherwise
	 */
	bool add_student (Student *);
	bool delete_student (string ssn);
	void set_number_correct_records(int num_correct);
	void increment_index_of_last_element();
	void decrement_index_of_last_element();
	
	// Accessor methods
	int get_number_correct_records();
	int get_index_of_last_element();
	
	// Query functions...
	bool check_lastname(string lastname);
	bool check_firstname(string firstname);
	bool check_socialsecuritynumber(string ssn);
	bool check_phonenumber(string phonenumber);
	bool check_studentage(int age);
	bool check_duplicate_social_security_number(string ssn);
			
	// Input/Output functions...
	//bool read_input(string inputfilename);
	/**
	 * Opens filename and initializes the database to the data in that file
	 * returns true if everything works, and false otherwise
	 */
	bool import_database (string filename);
	//void write_output(string outputfilename);
	/**
	 * Opens filename and exports the database to that file in a format
	 * that is compatible to the input file;
	 * returns true if everything works, and false otherwise
	 */
	bool export_database(string filename);
	
	// Other functions...	
	void uppercase(string & s);
	//void insertion_sort();
	//int binary_search(string ssn, int lowerindex, int upperindex);
	//void display_single_student_details(int index);
	//void display_all_student_details();
	bool display_student (string ssn);
	void display_all ();
	
	void print_header();
};
/**
 * Zhiyang Ong
 *
 * Assume that phone numbers can be duplicated since students can be siblings,
 * relatives, or friends living in the same house, where the same line phone
 * is shared between them
 *
 * @acknowledgement - code samples/examples from the web page
 *	<http://www-scf.usc.edu/~csci455/>; they are written by
 *	Dr. K. Narayanaswamy
 * @reference: D.S. Malik, "C++ Programming: Program Design Including Data
 *	Structures", Second Edition, Thomson Technology, USA, 2004, pp. 1167.
 */

// Including header files
#include <iostream>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <climits>
#include <cfloat>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
using namespace std;
#include "Student.h"
// ==========================================================================
class StudentDB {
	// Declare and initialize global variables
	private:
	// Number of correct records in the database
	int number_correct_records;
	// Index of the last student/element in the array
	int index_of_last_element;

	// --------------------------------------------------------------------------

	public:
	// Default constructor
	StudentDB();
	
	// ---------------------------------------------------------------------
	
	// Declaring function prototypes

	// Update/modifier functions
	void add_single_student(Student student_details);
	void remove_selected_student(string ssn);
	void set_number_correct_records(int num_correct);
	void increment_index_of_last_element();
	void decrement_index_of_last_element();
	
	// Accessor methods
	int get_number_correct_records();
	int get_index_of_last_element();
	
	// Query functions...
	bool check_lastname(string lastname);
	bool check_firstname(string firstname);
	bool check_socialsecuritynumber(string ssn);
	bool check_phonenumber(string phonenumber);
	bool check_studentage(int age);
	bool check_duplicate_social_security_number(string ssn, int current_index);
			
	// Input/Output functions...
	bool read_input(string inputfilename);
	void write_output(string outputfilename);
		
	// Other functions...	
	void uppercase(string & s);
	void insertion_sort();
	int binary_search(string ssn, int lowerindex, int upperindex);
	void display_single_student_details(int index);
	void display_all_student_details();
	void print_header();
};
/**
 * Zhiyang Ong
 *
 * Assume that phone numbers can be duplicated since students can be siblings,
 * relatives, or friends living in the same house, where the same line phone
 * is shared between them
 *
 * @acknowledgement - code samples/examples from the web page
 *	<http://www-scf.usc.edu/~csci455/>; they are written by
 *	Dr. K. Narayanaswamy
 * @reference: D.S. Malik, "C++ Programming: Program Design Including Data
 *	Structures", Second Edition, Thomson Technology, USA, 2004, pp. 1167.
 */

// Including header files
#include <iostream>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <climits>
#include <cfloat>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
using namespace std;
#include "Student.h"
// ==========================================================================

// Declaring constants...
// Number of delimiter characters to be deleted
const int NUMBER_OF_DELIMITER_CHARACTERS=1;
// Indices of the delimiters (dashes) in the US social security numbers
const int INDEX_FIRST_DELIMITER=3;
const int INDEX_SECOND_DELIMITER=6;
// Maximum number of characters in the any field
const int MAXIMUM_NUMBER_OF_CHARACTERS=20;

// ------------------------------------------------------------------

// Constructors...
// Default constructor
Student::Student( ) {
	// Fill up the parameters of the Student with default values
	first_name="Firstname";
	last_name="Lastname";
	social_security_number="999-99-9999";
	phone_number="(999)999-9999";
	student_age=120;
};

// Standard constructor - provide 3 parameters
Student::Student(string ssn, string lastname, int age) {
	// Fill up the parameters of the Student with values that are passed in
	last_name=lastname;
	social_security_number=ssn;
	student_age=age;
	// Fill up the remaining parameters with default values
	first_name="Firstname";
	phone_number="(999)999-9999";
};

// Standard constructor - provide all parameters
Student::Student(string firstname, string lastname, string ssn,
	string phone_num, int age) {

	// Fill up the parameters of the Student with values that are passed in
	first_name=firstname;
	last_name=lastname;
	social_security_number=ssn;
	phone_number=phone_num;
	student_age=age;
};

// ------------------------------------------------------------------

// Modifier/accessor functions...

/**
 * Function to assign the US Social Security number of the student
 * It must contain digits in all places, except dashes '-' in positions
 * 4 and 7
 * @param ssn is the assigned US Social Security number
 * @pre ssn must be a valid US Social Security number
 * @return true if ssn is valid and assigned; return false otherwise
 */
bool Student::set_ssn(string ssn) {
	// Precondition...
	social_security_number=ssn;
	return true;
}

/**
 * Function to assign the last name of the student
 * It should only contain alphabetic characters
 * @param lastname is the assigned last name of the student
 * @pre lastname must be a valid last name
 * @return true if lastname is valid and assigned; return false otherwise
 */
bool Student::set_lastname(string lastname) {
	// Precondition...
	last_name=lastname;
	return true;
}

/**
 * Function to assign the first name of the student
 * It should only contain alphabetic characters
 * @param firstname is the assigned first name of the student
 * @pre firstname must be a valid first name
 * @return true if firstname is valid and assigned; return false otherwise
 */
bool Student::set_firstname(string firstname) {
	// Precondition...
	first_name=firstname;
	return true;
}

/**
 * Function to assign the US phone number of the student
 * It should only contain '(' as the first character, ')' as the 5th character,
 * and '-' as the 9th character
 * @param phone_num is the assigned phone number of the student
 * @pre phone_num must be a valid phone number
 * @return true if phone_num is valid and assigned; return false otherwise
 */
bool Student::set_phone(string phone_num) {
	// Precondition...
	phone_number=phone_num;
	return true;
}

/**
 * Function to assign the age of the student
 * It should be non-negative (a baby can be 0 years of age)
 * and less than 120 (nobody lives for more than 120 years)
 * @param age is the assigned phone number of the student
 * @pre age must be a valid age
 * @return true if age is valid and assigned; return false otherwise
 */
bool Student::set_age(int age) {
	// Precondition...
	student_age=age;
	return true;
}


// Accessor functions...

/**
 * Function to access the US Social Security number of the student
 * @return the Social Security number of the student
 */
string Student::get_ssn() {
	return social_security_number;
}

/**
 * Function to access the last name of the student
 * @return the last name of the student
 */
string Student::get_lastname() {
	return last_name;
}

/**
 * Function to access the first name of the student
 * @return the first name of the student
 */
string Student::get_firstname() {
	return first_name;
}

/**
 * Function to access the phone number of the student
 * @return the phone number of the student
 */
string Student::get_phone() {
	return phone_number;
}

/**
 * Function to access the age of the student
 * @return the age of the student
 */
int Student::get_age() {
	return student_age;
}
               
// Query functions...

/**
 * Function to check it the student's last name is valid
 * @param lastname is the last name of the student
 * @return true if the last name includes only alphabetic characters;
 *	else, return false.
 *	Hence, names of people that include non-alphabetic characters
 *	will be considered invalid. This is a current program limitation
 *	given the assignment's specification. It should allow names with
 *	special characters to be valid, e.g. some European names with
 *	accented characters
 */
bool Student::check_last_name(string lastname) {
	for (int i=0; i < lastname.size(); i++) {
		// Are there any non-alphabetic characters?
		if (!isalpha(lastname[i])) {
			// Yes, ths last name is invalid
			return false;
		}
	}
	return true;
}

/**
 * Function to check it the student's first name is valid
 * @param firstname is the first name of the student
 * @return true if the first name includes only alphabetic characters;
 *	else, return false.
 *	Hence, names of people that include non-alphabetic characters
 *	will be considered invalid. This is a current program limitation
 *	given the assignment's specification. It should allow names with
 *	special characters to be valid, e.g. some European names with
 *	accented characters
 */
bool Student::check_first_name(string firstname) {
	for (int i=0; i < firstname.size(); i++) {
		// Are there any non-alphabetic characters?
		if (!isalpha(firstname[i])) {
			// Yes, the last name is invalid
			return false;
		}
	}
	return true;
}

/**
 * Function to check if the social security number is valid
 * @param ssn is a possible valid social security number of a
 *	student; ssn must contain only digits in all characters except
 *	the 4th and 7th, which are dashes
 * @return true if ssn is valid; else, return false
 */
bool Student::check_social_security_number(string ssn) {
	for (int i=0; i < ssn.size(); i++) {
		/**
		 * Are there any non-digits in characters that are supposed
		 * to be digits?
		 */
		if ((i != 3) && (i != 6) && (!isdigit(ssn[i]))) {
			// Yes, the ssn is invalid
			return false;
		}else if(((i == 3) || (i == 6)) && (ssn[i]!='-')) {
			return false;
		}
	}
	return true;
}

/**
 * Function to check if the phone number is valid
 * @param phonenumber is a possible valid phone number of a
 *	student; phonenumber must contain only digits in all characters
 *	 except the 1st ('('), 5th (')'), and 9th ('-')
 * @return true if phonenumber is valid; else, return false
 */
bool Student::check_phone_number(string phonenumber) {
	for (int i=0; i < phonenumber.size(); i++) {
		/**
		 * Are there any non-digits in characters that are supposed
		 * to be digits?
		 */
		if ((i == 0) && (phonenumber[i] != '(')) {
			// Yes, the phonenumber is invalid
			return false;
		}else if((i == 4) && (phonenumber[i]!=')')) {
			return false;
		}else if ((i == 8) && (phonenumber[i]!='-')) {
			// Yes, the phonenumber is invalid
			return false;
		}else if((!isdigit(phonenumber[i])) && (i!=0) && (i!=4) &&(i!=8)) {
			// Yes, the phonenumber is invalid
			return false;
		}
	}
	return true;
}

/**
 * Function to check if the student's age is valid
 * @param age is the age of the student; it should not be over 120,
 *	and it must be greater than 0.
 *	Needs more information since it makes no sense to have a toddler
 *	pursuing a Ph.D. in Computer Engineering or Biochemistry;
 *	assertions for this method implementation suffice according to
 *	the requirements of the assignment
 * @return true if age is valid; else, return false
 */
bool Student::check_age(int age) {
	if((age<1) || (age>120)) {
		return false;
	}else{
		return true;
	}
}
		   
/**
 * Function to display student data to the terminal
 */
void Student::display() {
	cout.setf(ios::left);
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_lastname();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_firstname();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_ssn();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_phone();
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << get_age() << endl;
}

// write student data to an output file stream that has been opened
void Student::write_to_stream(ofstream & outputfile) {
	// Left align the data
	outputfile.setf(ios::left);
	outputfile.width(16);
	outputfile << Student::get_lastname();
	outputfile.width(16);
	outputfile << get_firstname();
	outputfile.width(16);
	outputfile << get_ssn();
	outputfile.width(16);
	outputfile << get_phone();
	outputfile.width(16);
	outputfile << get_age() << endl;
	outputfile << endl;
}
/**
 * Zhiyang Ong
 *
 * Assume that phone numbers can be duplicated since students can be siblings,
 * relatives, or friends living in the same house, where the same line phone
 * is shared between them
 *
 * @acknowledgement - code samples/examples from the web page
 *	<http://www-scf.usc.edu/~csci455/>; they are written by
 *	Dr. K. Narayanaswamy
 * @reference: D.S. Malik, "C++ Programming: Program Design Including Data
 *	Structures", Second Edition, Thomson Technology, USA, 2004, pp. 1167.
 */

// Including header files
#include <iostream>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <climits>
#include <cfloat>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
using namespace std;
//#include "Student.h"
#include "StudentDB.h"
// ==========================================================================

// Declaring constants...
// Maximum number of students that can be placed in the table
const int MAXIMUM_NUMBER_OF_STUDENTS=50;
// Number of delimiter characters to be deleted
const int NUMBER_OF_DELIMITER_CHARACTERS=1;
// Indices of the delimiters (dashes) in the US social security numbers
const int INDEX_FIRST_DELIMITER=3;
const int INDEX_SECOND_DELIMITER=6;
// Maximum number of characters in the any field
const int MAXIMUM_NUMBER_OF_CHARACTERS=20;

// Declare and nitialize variables...
// Database that stores the correct student records
Student student_records[MAXIMUM_NUMBER_OF_STUDENTS];

// ------------------------------------------------------------------

// Default constructor
StudentDB::StudentDB() {
	number_correct_records=0;
	index_of_last_element=-1;
	
	database = NULL;
	last = NULL;
}

// ------------------------------------------------------------------

/**
 * Fuunction to read input from a file and process it
 * #Read the particulars of each student in a line with the following format:
 *	Last_name	First_name	Social_Security_Number	Telephone	Age
 * Assume that the input file will contain data in this format
 * @param inputfilename is the name of the input file
 */
bool StudentDB::import_database(string inputfilename) {
	
	// Create input file stream
	ifstream inputfile;
	// Open the input file
	inputfile.open(inputfilename.c_str());
	// Assertion to check if the input file exist
	if(inputfile == NULL) {
		cout << "Input file, with the filename " << inputfilename
			<< ", does not exist!" << endl;
		return false;
	}
	
	
	/**
	 * Declare and instantiate some variables to temporarily store data
	 * before processing them
	 */
	// Last name of the student
	string lastname="";
	// First name of the student
	string firstname="";
	// Student's social security number
	string socialsecuritynumber="";
	// Student's phone number in the united states
	string phonenumber="";
	// Student's age
	int studentage=0;
	// Number of errors found in the student record
	int errors=0;
	// Current index in which correct student record should be stored
	int correct_index;
	/**
	 * Temporary store the social security number so that it's dashes can be
	 * removed without modifying the social_security_number field of the
	 * student
	 */
	string temp_ssn="";	
	/**
	 * Current index of the record of student particulars
	 * that is being enumerated
	 */
	int i=0;
	// Start processing the data in the table
	while((inputfile != NULL) && (i<MAXIMUM_NUMBER_OF_STUDENTS)) {
		// Stop processing the input file once its end has been reached
		if ( (inputfile >> lastname	>> firstname >> socialsecuritynumber
			>> phonenumber >> studentage) == NULL) {
			break;
		}

		i++;		
		/**
		 * Check if the student particulars are valid...
		 * If any of the student particulars is invalid,
		 * ignore this current line in the input file and
		 * skip to the next
		 */
		if(!check_lastname(lastname)) {
			cout << "\t Ignoring Record Number " << i <<
				" - bad last name" << endl;
			cout << "\t\t Last name of the student should only contain "
				<< "alphabets" << endl;
			errors++;
			continue;
		}else if(!check_firstname(firstname)) {
			cout << "\t Ignoring Record Number " << i <<
				" - bad first name" << endl;
			cout << "\t\t First name of the student should only contain "
				<< "alphabets" << endl;
			errors++;
			continue;
		}else if(!check_socialsecuritynumber(socialsecuritynumber)) {
			cout << "\t Ignoring Record Number " << i <<
				" - bad social security number" << endl;
			cout << "\t\t Security numbers should contain dashes at the "
				<< "4th and 7th characters, and digits otherwise" << endl;
			errors++;
			continue;
		}else if(!check_phonenumber(phonenumber)) {
			cout << "\t Ignoring Record Number " << i 
				<< " - bad phone number" << endl;
			cout << "\t\t Phone numbers should be given in this format: "
				<< "(XXX)XXX-XXXX, where each X is a digit" << endl;
			errors++;
			continue;
		}else if(!check_studentage(studentage)) {
			cout << "\t Ignoring Record Number " << i << " - bad age" << endl;
			cout << "\t\t Age of the student should be between 1 and 120, "
				<< "inclusive" << endl;
			errors++;
			continue;
		}else if(!check_duplicate_social_security_number(socialsecuritynumber)) {
			cout << "\t Ignoring Record Number " << i
				<< " - duplicate social security number" << endl;
			errors++;
			continue;
		}
//cout << "Checks passed" << endl;		
		/**
		 * Student's first and last names, social security number, phone
		 * number, and age are valid...
		 * Enter these details into the appropriate place in the records
		 */
		correct_index=i-errors-1;
		// Creating a student record
		Student *tempStudent = new Student();
		tempStudent->set_lastname(lastname);
//cout << "Modify last name of temp student" << endl;
		tempStudent->set_firstname(firstname);
		tempStudent->set_ssn(socialsecuritynumber);
		tempStudent->set_phone(phonenumber);
		tempStudent->set_age(studentage);
		if(!add_student(tempStudent)) {
cout << "Error adding student from input file" << endl;
			continue;
		}
	}
	
	cout << endl;
	cout << "Processed " << i << " student records" << endl;
	cout << errors << " errors were found" << endl;
	cout << endl;
	// Determine the number of correct student records
	number_correct_records=i-errors;
	
	// Close the input filestream
	inputfile.close();
	
	return true;
}


/**
 * Function to write output to a file
 * #Print the particulars of each student in a line with the following format:
 *	Last_name	First_name	Social_Security_Number	Telephone	Age
 * @param outputfilename is the name of the output file
 */
bool StudentDB::export_database(string outputfilename) {
	
	// Create output file stream
	ofstream outputfile;
	/**
	 * Convert outputfilename to string in C so that the file I/O function
	 * in the C++ library can be utilised
	 */
	outputfile.open(outputfilename.c_str());
	// Assertion to check if the output file was opened properly
	if(outputfile == NULL) {
		cout << "Output file, with the filename " << outputfilename
			<< ", does not exist!" << endl;
		return false;
	}
	
	
	// Left align the data
	outputfile.setf(ios::left);
	// Print the student records...
	
	// Pointer to traverse the list
	student_element *current;
	// Pointer just before current
	student_element *trail_current;

	if(database!=NULL) {
		current = database;

		while(current != NULL) {
			outputfile.width(16);
			outputfile << current -> value -> get_lastname();
			outputfile.width(16);
			outputfile << current -> value -> get_firstname();
			outputfile.width(16);
			outputfile << current -> value -> get_ssn();
			outputfile.width(16);
			outputfile << current -> value -> get_phone();
			outputfile.width(16);
			outputfile << current -> value -> get_age();
			outputfile << endl;

			trail_current = current;
			current = current -> next;
		}
	}

	outputfile << endl;
	
	// Close the output filestream
	outputfile.close();
	return true;
}


/**
 * Function to convert all letters in the string s to uppercase
 * @param s is the string to be converted to uppercase
 */
void StudentDB::uppercase (string & s) {
	// For all characters in s
	for (int i=0; i < s.size(); i++) {
		// change it to uppercase
		s[i] = toupper(s[i]);
	}
}


/**
 * Function to check it the student's last name is valid
 * @param lastname is the last name of the student
 * @return true if the last name includes only alphabetic characters;
 *	else, return false.
 *	Hence, names of people that include non-alphabetic characters
 *	will be considered invalid. This is a current program limitation
 *	given the assignment's specification. It should allow names with
 *	special characters to be valid, e.g. some European names with
 *	accented characters
 */
bool StudentDB::check_lastname(string lastname) {
	for (int i=0; i < lastname.size(); i++) {
		// Are there any non-alphabetic characters?
		if (!isalpha(lastname[i])) {
			// Yes, ths last name is invalid
			return false;
		}
	}
	return true;
}


/**
 * Function to check it the student's first name is valid
 * @param firstname is the first name of the student
 * @return true if the first name includes only alphabetic characters;
 *	else, return false.
 *	Hence, names of people that include non-alphabetic characters
 *	will be considered invalid. This is a current program limitation
 *	given the assignment's specification. It should allow names with
 *	special characters to be valid, e.g. some European names with
 *	accented characters
 */
bool StudentDB::check_firstname(string firstname) {
	for (int i=0; i < firstname.size(); i++) {
		// Are there any non-alphabetic characters?
		if (!isalpha(firstname[i])) {
			// Yes, the last name is invalid
			return false;
		}
	}
	return true;
}


/**
 * Function to check if the social security number is valid
 * @param ssn is a possible valid social security number of a
 *	student; ssn must contain only digits in all characters except
 *	the 4th and 7th, which are dashes
 * @return true if ssn is valid; else, return false
 */
bool StudentDB::check_socialsecuritynumber(string ssn) {
	for (int i=0; i < ssn.size(); i++) {
		/**
		 * Are there any non-digits in characters that are supposed
		 * to be digits?
		 */
		if ((i != 3) && (i != 6) && (!isdigit(ssn[i]))) {
			// Yes, the ssn is invalid
			return false;
		}else if(((i == 3) || (i == 6)) && (ssn[i]!='-')) {
			return false;
		}
	}
	return true;
}


/**
 * Function to check if the phone number is valid
 * @param phonenumber is a possible valid phone number of a
 *	student; phonenumber must contain only digits in all characters
 *	 except the 1st ('('), 5th (')'), and 9th ('-')
 * @return true if phonenumber is valid; else, return false
 */
bool StudentDB::check_phonenumber(string phonenumber) {
	for (int i=0; i < phonenumber.size(); i++) {
		/**
		 * Are there any non-digits in characters that are supposed
		 * to be digits?
		 */
		if ((i == 0) && (phonenumber[i] != '(')) {
			// Yes, the phonenumber is invalid
			return false;
		}else if((i == 4) && (phonenumber[i]!=')')) {
			return false;
		}else if ((i == 8) && (phonenumber[i]!='-')) {
			// Yes, the phonenumber is invalid
			return false;
		}else if((!isdigit(phonenumber[i])) && (i!=0) && (i!=4) &&(i!=8)) {
			// Yes, the phonenumber is invalid
			return false;
		}
	}
	return true;
}


/**
 * Function to check if the student's age is valid
 * @param age is the age of the student; it should not be over 120,
 *	and it must be greater than 0.
 *	Needs more information since it makes no sense to have a toddler
 *	pursuing a Ph.D. in Computer Engineering or Biochemistry;
 *	assertions for this method implementation suffice according to
 *	the requirements of the assignment
 * @return true if age is valid; else, return false
 */
bool StudentDB::check_studentage(int age) {
	if((age<1) || (age>120)) {
		return false;
	}else{
		return true;
	}
}


/**
 * Function to check if the student's social security number is a duplicate
 * Social security numbers are uniquely assigned to each individual;
 * hence, there shall be no duplicates
 * @param ssn is the social security number
 * @param student_particulars is the student database
 * @param current_index is the current index of the student in the database
 * @return true if social security number is not a duplicate;
 *	else, return false
 */
bool StudentDB::check_duplicate_social_security_number(string ssn) {
	
	// Pointer to traverse the list
	student_element *current;
	// Pointer just before current
	student_element *trail_current;

	if(database==NULL) {
/*
		cout << "Student database is empty." << endl;
		cout << "This social security number is not duplicated." << endl;
*/
		return true;
	}else{
		current = database;

		while(current != NULL) {
			if(strcmp(current->value->get_ssn().c_str(),
				ssn.c_str()) == 0) {

				return false;
			}else{
				trail_current = current;
				current = current -> next;
			}
		}
	}

	return true;
}


/**
 * Function to sort the student database according to the students'
 * social security numbers - Insertion sort
 */
/*
void StudentDB::insertion_sort() {
	// Index of the first element that is not in sorting order
	int firstOutOfOrder=0;
	// Index of the linear collection/array to insert the student's particulars
	int location=0;
	// The student's particulars...
	Student current_student;
	
	for(firstOutOfOrder=1; firstOutOfOrder<get_number_correct_records();
		firstOutOfOrder++) {
		
		if(strcmp(student_records[firstOutOfOrder].get_ssn().c_str(),
		student_records[firstOutOfOrder-1].get_ssn().c_str()) < 0) {

			current_student=student_records[firstOutOfOrder];
			location=firstOutOfOrder;
			do {
				student_records[location]=student_records[location-1];
				location--;
			}while((location>0) && (strcmp(student_records[location-1].
				get_ssn().c_str(), current_student.get_ssn().c_str()) > 0));
			
			student_records[location]=current_student;
		}
	}
}
*/


/**
 * Function to search for a particular social security number in the
 * student database - use binary search with recursion implementation
 * @param lowerindex is the lower limt where the search will "start" from
 * @param upperindex is the upper limt where the search will "end"
 * @param ssn is the social security number that is used as a search key
 * @return -1 if no student has a social security number with ssn;
 *	else, return the index of the student in the array with that social
 *	security number
 */
/*
int StudentDB::binary_search(string ssn, int lowerindex, int upperindex) {
	if(!check_socialsecuritynumber(ssn)) {
		cout << "Social security number entered is invalid" << endl;
		return -1;
	}
	
	// Have the indices cross each other?
	if(lowerindex > upperindex) {
		// Yes, no student has this social security number
		return -1;
	// Are the indices equal?
	}else if(lowerindex == upperindex) {
*/
		/**
		 * Yes. Does currently enumerated student have ssn as the social
		 * sequrity number?
		 */
/*
		if(student_records[lowerindex].get_ssn()==ssn) {
			// Yes, current student has this social security number.
			return lowerindex;
		}else{
			// No; no student has this social security number
			return -1;
		}
	}else{
		// lowerindex < upperindex
		// Half the search space and perform recursive search
		int midpoint=(lowerindex + upperindex)/2;
		// Is the search key greater than current value?
		if(strcmp(ssn.c_str(),
			student_records[midpoint].get_ssn().c_str())>0) {
			// Yes, keep on searching recursively
			return binary_search(ssn, midpoint + 1, upperindex);
		// Is the search key less than current value?
		}else if(strcmp(ssn.c_str(),
			student_records[midpoint].get_ssn().c_str())<0) {
			// Yes, keep on searching recursively
			return binary_search(ssn, lowerindex, midpoint - 1);
		}else{
			// No, current student has this social security number.
			return midpoint;
		}
	}
}
*/


/**
 * Function to display the particulars of a students
 * @param index is the index of the student, whose details are to be displayed
 */
bool StudentDB::display_student(string ssn) {
	cout.setf(ios::left);
	
	// Pointer to traverse the list
	student_element *current;
	// Pointer just before current
	student_element *trail_current;

	if(database!=NULL) {
		current = database;

		while(current != NULL) {
			if(strcmp(current->value->get_ssn().c_str(),
				ssn.c_str()) == 0) {

				cout.width(16);
				cout << current -> value -> get_lastname();
				cout.width(16);
				cout << current -> value -> get_firstname();
				cout.width(16);
				cout << current -> value -> get_ssn();
				cout.width(16);
				cout << current -> value -> get_phone();
				cout.width(16);
				cout << current -> value -> get_age() << endl;
				return true;
			}else{
				trail_current = current;
				current = current -> next;
			}
		}
	}
	return false;
}


/**
 * Function to add a student's particulars to the database
 * @param student_details contain the student's particulars
 * @param student student_particulars contain the database
 * If this student's social security number is not found in the database,
 * then the student is added to the database
 * Else, the user is informed that another student has the same social security
 * number as this student. Hence, this student's record cnnot be added to the
 * database.
 */
bool StudentDB::add_student(Student * student_details) {
	// Pointer to traverse the list
	student_element *current;
	// Pointer just before current
	student_element *trail_current;
		
	// Allocate a new student_element
	student_element *newelement = new student_element();
	// Place the student pointer into "value" and hook up the pointers
	newelement->value = student_details;
	newelement->next = NULL;

	// List is empty and uninitialized
	if(database == NULL) {
		database = newelement;
	}else{
		current=database;
		
		while(current != NULL) {
			if(strcmp(current->value->get_ssn().c_str(),
				student_details->get_ssn().c_str()) >0) {
				
				break;
			}else if(strcmp(current->value->get_ssn().c_str(),
				student_details->get_ssn().c_str()) == 0) {
				
				cout << "A student with the social security number, "
					<< current->value->get_ssn()
					<< ", already exists in the database"
					<< endl;
				return false;
			}else{
				trail_current = current;
				current = current -> next;
			}
		}
		
		// List is empty and initialized
		if(current == database) {
			newelement->next=database;
			database=newelement;
		}else{
			trail_current->next=newelement;
			newelement->next=current;
		}
	}

	increment_index_of_last_element();
	set_number_correct_records(get_index_of_last_element()+1);
	return true;
}


/**
 * Function to delete a student's details from the database
 * @param student_details contain the student's social security number
 * @param student student_particulars contain the database
 * If this student's social security number is not found in the database,
 * then this student's details cannot be removed from the database
 * Else, this student's record is removed from the database.
 */
bool StudentDB::delete_student(string ssn) {
	if(!check_socialsecuritynumber(ssn)) {
		cout << "Social security number entered is invalid" << endl;
		return false;
	}else{
		// Pointer to traverse the list
		student_element *current;
		// Pointer just before current
		student_element *trail_current;
		
		if(database==NULL) {
			cout << "Student database is empty." << endl;
			cout << "Delete operation cannot be performed." << endl;
			return false;
		}else{
			current = database;
			
			while(current != NULL) {
				if(strcmp(current->value->get_ssn().c_str(),
				ssn.c_str()) == 0) {
					
					break;
				}else{
					trail_current = current;
					current = current -> next;
				}
			}
			
			if(current == NULL) {
				cout << "No student in the database has the social"
					<< " security number, "
					<< ssn << "." << endl;
				return false;
			}else{
				if(strcmp(current->value->get_ssn().c_str(),
				ssn.c_str()) == 0) {
					if(database==current) {
						database=database->next;
						delete current;
					}else{
						trail_current->next = current->next;
						delete current;
					}
				}else{
					cout << "No student in the database has the"
						<<" social security number, "
						<< ssn << "." << endl;
					return false;
				}
			}
		}
		decrement_index_of_last_element();
		set_number_correct_records(get_index_of_last_element()+1);

		cout << "Student with the social security number, "
			<< ssn << ", is removed from the database." << endl;
		return true;
	}
}


/**
 * Function to print the header of the terminal session
 */
void StudentDB::print_header() {
	cout.setf(ios::left);
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Last Name";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "First Name";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Social Security #";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Phone #";
	cout.width(MAXIMUM_NUMBER_OF_CHARACTERS);
	cout << "Age" << endl;
}


/**
 * Function to display the particulars of all students
 */
void StudentDB::display_all() {
	// Print the header...
	print_header();

	cout.setf(ios::left);
	
	// Pointer to traverse the list
	student_element *current;
	// Pointer just before current
	student_element *trail_current;

	if(database!=NULL) {
		current = database;

		while(current != NULL) {

			cout.width(16);
			cout << current -> value -> get_lastname();
			cout.width(16);
			cout << current -> value -> get_firstname();
			cout.width(16);
			cout << current -> value -> get_ssn();
			cout.width(16);
			cout << current -> value -> get_phone();
			cout.width(16);
			cout << current -> value -> get_age() << endl;

			trail_current = current;
			current = current -> next;
		}
	}
}


/**
 * Function to assign the number of correct records in the database
 */
void StudentDB::set_number_correct_records(int num_correct) {
	number_correct_records=num_correct;
}


/**
 * Function to increment the index of the last element
 */
void StudentDB::increment_index_of_last_element() {
	index_of_last_element++;
}


/**
 * Function to decrement the index of the last element
 */
void StudentDB::decrement_index_of_last_element() {
	index_of_last_element--;
}


/**
 * Function to get the number of correct records
 * @return the number of correct records
 */
int StudentDB::get_number_correct_records() {
	return number_correct_records;
}

/**
 * Function to get the index of the last element
 * @return the index of the last element
 */
int StudentDB::get_index_of_last_element() {
	return index_of_last_element;
}
/**
 * Zhiyang Ong
 *
 * Assume that phone numbers can be duplicated since students can be siblings,
 * relatives, or friends living in the same house, where the same line phone
 * is shared between them
 *
 * @acknowledgement - code samples/examples from the web page
 *	<http://www-scf.usc.edu/~csci455/>; they are written by
 *	Dr. K. Narayanaswamy
 * @reference: D.S. Malik, "C++ Programming: Program Design Including Data
 *	Structures", Second Edition, Thomson Technology, USA, 2004, pp. 1167.
 */

// Including header files
#include <iostream>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <climits>
#include <cfloat>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
using namespace std;
//#include "Student.h"
#include "StudentDB.h"
// ==========================================================================

// Declare and initialize global variables
//int number_correct_records=0;
//int index_of_last_element=-1;

// --------------------------------------------------------------------------

// Main function...
main() {
	cout << "STUDENT DATABASE PROGRAM" << endl;
	cout << endl;
	cout << "Keys:" << endl;
	cout << "A <== Add a student's particulars to the current datatbase" << endl;
	cout << "D <== Display a student's particulars" << endl;
	cout << "E <== Export database of students' paticulars" << endl;
	cout << "I <== Import student data from an input file" << endl;
	cout << "R <== Remove a student's particulars from the database" << endl;
	cout << "S <== Show all the particulars of students in the database" << endl;
	cout << "Q <== Exit program" << endl;
	cout << endl;
	
	// Names for input and output file streams
	string inputfilename, outputfilename;
	// Input character that will be processed as a menu option
	char input_character;
	// Boolean flag to exit the program
	bool exit_flag=false;
	// Flag to indicate that student database exist
	bool database_flag=false;
	// Flag for overwriting the input file
	bool overwrite=false;
	/**
	 * Social security number entered by the user to indicate that an operation
	 * will be performed on the database using this
	 */
	string input_ssn="";
	// Database that stores the correct student records
	StudentDB database;
	
	// Temporary variables to contain details of the student
	string fname;
	string lname;
	string ssnum;
	string phoneno;
	int age;
	Student *newStudent=new Student();
	
	// User menu options and processing
	while(!exit_flag) {
		cout << "Enter command (A, D, E, I, R, S - or Q to quit) : ";
		if((cin >> input_character) != NULL) {
			input_character=toupper(input_character);
		
			switch(input_character) {
				case 'Q':
					cout << "Exiting the database program..." << endl;
					return 0;
				case 'A':
					if(!database_flag) {
						cout << "Database is empty. "
							<< "Please import data before processing it."
							<< endl;
						continue;
					}
					
					// Prompt user for input
					cout << "Enter the following details of the student that "
						<< "be added to the database" << endl;
					cout << "First name: ";
					cin >> fname;
					cout << "Last name: ";
					cin >> lname;
					cout << "Social Security Number: ";
					cin >> ssnum;
					cout << "Phone number: ";
					cin >> phoneno;
					cout << "Age: ";
					cin >> age;
					/**
					 * Check if the student particulars are valid...
					 * If any of the student particulars is invalid,
					 * ignore this current line in the input file and
					 * skip to the next
					 */
					if(!database.check_lastname(lname)) {
						cout << "\t\t Last name of the student should only contain "
							<< "alphabets" << endl;
					}else if(!database.check_firstname(fname)) {
						cout << "\t\t First name of the student should only contain "
							<< "alphabets" << endl;
					}else if(!database.check_socialsecuritynumber(ssnum)) {
						cout << "\t\t Security numbers should contain dashes at the "
							<< "4th and 7th characters, and digits otherwise" << endl;
					}else if(!database.check_phonenumber(phoneno)) {
						cout << "\t\t Phone numbers should be given in this format: "
							<< "(XXX)XXX-XXXX, where each X is a digit" << endl;
					}else if(!database.check_studentage(age)) {
						cout << "\t\t Age of the student should be between 1 and 120, "
							<< "inclusive" << endl;
					}else if(!database.check_duplicate_social_security_number(ssnum)) {
						cout << "\t Duplicate social security number" << endl;
					}else{
						newStudent->set_lastname(lname);
						newStudent->set_firstname(fname);
						newStudent->set_ssn(ssnum);
						newStudent->set_phone(phoneno);
						newStudent->set_age(age);
						database.add_student(newStudent);
					}
					break;
				case 'D':
					if(!database_flag) {
						cout << "Database is empty. "
							<< "Please import data before processing it."
							<< endl;
						continue;
					}
					// Prompt user for input
					cout << "Please enter a social security number "
						<< "to search for: ";
					cin >> input_ssn;
					if(database.check_socialsecuritynumber(input_ssn)) {
						database.print_header();
						if(!database.display_student(input_ssn)) {
							cout << "The social security number you "
							<< "have entered is not found in the database." << endl;
						}
					}else{
						cout << "The social security number you have entered "
							<< "is invalid." << endl;
					}
					break;
				case 'E':
					if(!database_flag) {
						cout << "Database is empty. "
							<< "Please import data before processing it."
							<< endl;
						continue;
					}else{
						// Prompt user for input
						while(!overwrite) {
							cout << "Please enter output filename, "
								<< "and press the return key: ";
							cin >> outputfilename;
							cout << endl;
							if(outputfilename == inputfilename) {
								do{
									cout << "Do you want to overwrite "
										<< "the input file? Y/N?";
									cin >> input_character;
									input_character=toupper(input_character);
									if(input_character == 'Y') {
										overwrite=true;
										break;
									}else if(input_character == 'N') {
										break;
									}else{
										cout << "Enter Y or N: ";
									}
								}while((cin >> input_character) !=NULL);
							}else{
								break;
							}
						}
						database.export_database(outputfilename);
					}
					break;
				case 'I':
					// Prompt user for input
					cout << "Please enter input filename, "
						<< "and press the return key: ";
					cin >> inputfilename;
					cout << '\t' << "Processing the input file: "
						<< inputfilename << endl;
					cout << endl;
					// Read the input file
    				if(!database.import_database(inputfilename)) {
						return -1;
					}
//cout << "Input file has been read." << endl;
					database_flag=true;
					break;
				case 'R':
					if(!database_flag) {
						cout << "Database is empty. "
							<< "Please import data before processing it."
							<< endl;
						continue;
					}
					// Prompt user for input
					cout << "Please enter a social security number "
						<< "to search for: ";
					cin >> input_ssn;
					database.delete_student(input_ssn);
					break;
				case 'S':
					if(!database_flag) {
						cout << "Database is empty. "
							<< "Please import data before processing it."
							<< endl;
						continue;
					}
					database.display_all();
					break;
				default:
					cout << "Invalid command entered. Please re-enter command..."
						<< endl;
					cout << endl;
					continue;
			}
		}else{
			return -1;
		}
		
		cout << endl;
	}
	
	// Write to output file...
	database.export_database(outputfilename);
	cout << "Output is written to the file: " << outputfilename << endl;
}
#include <iostream>
#include <string>
#include <cstring>
#include <fstream>
#include <iomanip>
#include <climits>
#include <cfloat>
#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
using namespace std;
#include "Student.h"

main() {
	int a[];
	a[50];
	a[23]=123456789;
	cout << "a is: " << a[23] << endl;
}
